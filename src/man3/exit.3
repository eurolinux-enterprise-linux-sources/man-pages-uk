." © 2005-2007 DLOU, GNU FDL
." URL: <http://docs.linux.org.ua/index.php/Man_Contents>
." Supported by <docs@linux.org.ua>
."
." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.2
." or any later version published by the Free Software Foundation;
." with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
." 
." A copy of the license is included  as a file called COPYING in the
." main directory of the man-pages-* source package.
."
." This manpage has been automatically generated by wiki2man.py
." This tool can be found at: <http://wiki2man.sourceforge.net>
." Please send any bug reports, improvements, comments, patches, etc. to
." E-mail: <wiki2man-develop@lists.sourceforge.net>.

.TH "exit" "3" "2007-10-27-16:31" "© 2005-2007 DLOU, GNU FDL" "2007-10-27-16:31"

.SH " Назва "
.PP

exit — викликати нормальне завершення програми

.SH " Використання "
.PP

\fB#include <stdlib.h>\fR
.PP

\fBvoid exit(int \fR \fIstatus\fR \fB);\fR

.SH " Опис "
.PP

Функція exit() викликає нормальне завершення роботи програми й повертає величину (\fIstatus\fR & 0377) батьківському процесові (див. \fBwait(2)\fR). Всі зареєстровані з допомогою atexit() і on_exit() функції викликаються в порядку, протилежному до порядку їх реєстрації, а всі відкриті потоки зливаються й закриваються. Файли, створені за допомогою tmpfile(), вилучаються.

Стандарт C вказує два означення, EXIT_SUCESS і EXIT_FAILURE, що можуть передаватись функції exit() на позначення, відповідно, успішного або ж неуспішного завершення.

.SH " Повернене значення "
.PP
Функція exit() не повертається.

.SH " Примітки "
.PP

Під час обробки виходу можна зареєструвати додаткові функції за допомогою atexit() і on_exit(). У всіх випадках остання зареєстрована функція вилучається з ланцюжка зареєстрованих функцій і викликається. Що повинно статись, якщо під час цієї обробки буде викликано exit() або longjmp(), не визначено.

Використання EXIT_SUCCESS і EXIT_FAILURE переноситься (на не\-Unix\-середовища) дещо краще, ніж 0 і якась ненульова величина (як\-от 1 або \-1). Зокрема, VMS має щодо цього інше погодження.

BSD намагалась стандартизувати коди завершення — див. файл <sysexits.h>

Після виконання exit() стан виходу повинен передатись батьківському процесові. Тут можливі три випадки. Якщо процес\-предок встановив SA_NOCLDWAIT, або ж встановив обробник сигналу SIGCHLD в значення SIG_IGN, стан нехтується. Якщо предок чекав на завершення нащадка, його повідомляється про стан виходу. В обох випадках процес негайно помирає. Якщо предок не вказав, що його не цікавить стан виходу нащадка, але й не чекає його завершення, процес, що виходить, перетворюється на «зомбі» (нічим іншим, як сховищем одного байту, котрий вказуватиме стан виходу), так що предок зможе дінатись про цей стан пізніше, викликавши одну з функцій wait().

Якщо реалізація підтримує сигнал SIGCHLD, цей сигнал посилається предкові. Якщо предок встановив SA_NOCLDWAIT, не визначено, чи сигнал SIGCHLD буде послано.

Якщо процес є провідним у сеансі й підлеглий йому термінал контролює сеанс, то кожному процесові з групи переднього плану цього терміналу посилається сигнал SIGHUP, а термінал від'єднується від цього сеансу, дозволяючи взяти контроль над собою іншому процесові.

Якщо вихід з процесу спричиняє «осиротіння» групи процесів і котрийсь із процесів цієї групи зупиняється, кожному процесові цієї групи буде надіслано спершу сигнал SIGHUP, за яким одразу ж — SIGCONT.

.SH " Дивіться також "
.PP
_exit(2), wait(2), atexit(3), on_exit(3), tmpfile(3)

.SH " Переклад "
.PP

Цю сторінку переклав Ярослав Федевич.

