." © 2005-2007 DLOU, GNU FDL
." URL: <http://docs.linux.org.ua/index.php/Man_Contents>
." Supported by <docs@linux.org.ua>
."
." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.2
." or any later version published by the Free Software Foundation;
." with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
." 
." A copy of the license is included  as a file called COPYING in the
." main directory of the man-pages-* source package.
."
." This manpage has been automatically generated by wiki2man.py
." This tool can be found at: <http://wiki2man.sourceforge.net>
." Please send any bug reports, improvements, comments, patches, etc. to
." E-mail: <wiki2man-develop@lists.sourceforge.net>.

.TH "open" "2" "2007-10-27-16:31" "© 2005-2007 DLOU, GNU FDL" "2007-10-27-16:31"

.SH "НАЗВА"
.PP
open, creat \- відкривають і, по можливості, створюють файл
або пристрій

.SH "СИНТАКСИС"
.PP
\fB#include\fR \fB<sys/types.h>\fR
.br

\fB#include\fR \fB<sys/stat.h>\fR
.br

\fB#include\fR \fB<fcntl.h>\fR
.br

\fBіnt\fR \fBopen(const\fR \fBchar\fR \fB*\fR\fIpathname\fR\fB,\fR \fBint\fR \fIflags\fR\fB);\fR
.br

\fBіnt\fR \fBopen(const\fR \fBchar\fR \fB*\fR\fIpathname\fR\fB,\fR \fBint\fR \fIflags\fR\fB,\fR \fBmode_t\fR \fImode\fR\fB);\fR
.br

\fBіnt\fR \fBcreat(const\fR \fBchar\fR \fB*\fR\fIpathname\fR\fB,\fR \fBmode_t\fR \fImode\fR\fB);\fR

.SH "ОПИС"
.PP
Виклик \fBopen()\fR використовується, щоб перетворити шлях до
файлу у дескриптор файлу (невелике додатнє ціле число, що
використовується з викликами \fBread\fR і \fBwrite\fR для послідовного
вводу/виводу). Якщо системний виклик матиме успіх,
повернутий файловий дескриптор буде найменшим дескриптором
що ще не було відкрито процесом. Цей виклик створить новий
відкритий файл не поділений з жодним іншими процесом (але
спільні файли можуть виникнути завдяки системному виклику
\fBfork\fR(2)). Новий дескриптор файлу залишатиметься також
відкритим при виконанні функцій \fBexec\fR(2) (дивіться
\fBfcntl\fR(2)). Покажчик встановлюється на початку файлу.

Параметр \fIflags\fR \- це один з прапорців: \fBO_RDONLY\fR, \fBO_WRONLY\fR
або \fBO_RDWR\fR, що, відповідно, відкривають файл "тільки для
читання", "тільки для запису" або ж "для читання і запису"
і які складаються за допомогою побітової операції OR з
таких значень, як:

.TP
.B \fBO_CREAT\fR
 Якщо файл не існує, то його буде створено. Власник (ID користувача) файлу встановлюється до дійсного користувацького ID процесу. Група (ID групи) встановлюється до значення ID групи процесу, або ж до значення ID групи батьківського каталогу (залежить від типу файлової системи, параметрів приєднання (mount) і режиму батьківського каталогу, дивіться, опції монтування \fIbsdgroups\fR і \fIsysvgroups,\fR описані у \fBmount\fR(8)).

.TP
.B \fBO_EXCL\fR
 Якщо використовується разом з \fBO_CREAT\fR, то при наявності вже створеного файлу виклик \fBopen\fR викличе помилку. У цьому стан, при існуючому символьному посиланні не звертається увага, на що він вказує. \fBO_EXCL\fR не працює у файлових системах NFS, а в програмах, що використовують цей прапор для блокування, виникне стан перегонів (race conditіon). Вирішенням атомарного блокування файлу буде \- створити файл з унікальним ім'ям тій самій файловій системі (це ім'я може містити, наприклад, назву машини й ідентифікатор процесу),

використовуючи \fBlink\fR(2), для створення посилання на
файл блокування. Якщо \fBlink()\fR повертає значення 0,
блокування вдалося. У протилежному випадку,
використовуйте \fBstat\fR(2), щоб переконатися, що
кількість посилань на унікальний файл зросло до
двох. Це також означає, що блокування мало успіх.

.TP
.B \fBO_NOCTTY\fR
 Якщо \fIpathname\fR вказує на термінальний пристрій (дивіться \fBtty\fR(4)), то воно не стане керувальним терміналом процесу, навіть якщо процес не має жодного.

.TP
.B \fBO_TRUNC\fR
 Якщо файл вже існує, є звичайним файлом і режим, у якому його відкрито, дозволяє запис в цей файл (тобто встановлені O_RDWR або O_WRONLY), то його довжина буде зітнута до нуля. Якщо ж файл являється каналом FІFO або термінальним пристроєм, то цей прапор ігноруватиметься. В решті випадків, дію прапора O_TRUNC не визначено.

.TP
.B \fBO_APPEND\fR
 Файл буде відкрито у режимі додавання. Перед кожною операцією \fBwrite\fR, файловий покажчик встановлюватиметься наприкінці файлу, так ніби використовувався \fBlseek\fR. \fBO_APPEND\fR може призвести до ушкодження файлів на системі NFS, якщо кілька процесів одночасно додають дані до того самого файлу. Це відбувається через те, що NFS не підтримує додавання у файл даних, тому ядро на клієнті повинне удавати цю підтримку, що призводить до умови перегонів.

.TP
.B \fBO_NONBLOCK\fR або \fBO_NDELAY\fR
 Коли можливо, файл відкриватиметься у режимі non\-blocking. Ні \fBopen\fR, ні інші наступні операції над повернутим дескриптором файлу не змушують викликаючий процес чекати. Для роботи з каналами FІFO дивіться також \fBfifo\fR(4). Цей режим не повинен мати жодної дії на файли за виключенням FIFO.

.TP
.B \fBO_SYNC\fR
 Файл відкривається у режимі синхронного вводу\-виводу. Всі виклики \fBwrite\fR для відповідного дескриптора файлу блокують викликаючий процес доти, доки дані не буде фізично записано. Однак, вам необхідно прочитати також розділ \fBОБМЕЖЕННЯ\fR нижче. 

.TP
.B \fBO_NOFOLLOW\fR
 Якщо \fIpathname\fR \- це символьне посилання, то \fBopen\fR зазнає поразки. Це розширення FreeBSD, що було додано до Lіnux версії 2.1.126. Всі інші символьні посилання, що складають шлях до файлу, будуть оброблені як звичайно. Заголовки з glibc версії 2.0.100 містять визначення цього прапора. Ядра, попередні версії 2.1.126, ігнорують цей прапор.

.TP
.B \fBO_DІRECTORY\fR
 Якщо \fIpathname\fR не є каталогом, то \fBopen\fR зазнає невдачі. Цей прапор використовується тільки у Lіnuxі було додано до ядра 2.1.126, щоб уникнути проблем з відмови від обслуговування, DoS, якщо \fBopendir\fR(2) було викликано для каналу FІFO або стрічкового пристрою. Цей прапор не слід використовувати поза втіленням \fBopendir\fR.

.TP
.B \fBO_DIRECT\fR
 Намагатиметься зменшити ефект кешування операцій вводу\-виводу. Як правило, це знижує ефективність, але використовується у спеціальних ситуаціях, наприклад коли аплікації застосовують власне кешування. Ввід\-вивід до файла здійснюється безпосередньо з/у буфери користувацького простору. Ввід\-вивід буде синхронним, тобто після завершення кожного системного виклику \fBread\fR(2) і \fBwrite\fR(2), дані гарантовано буде передано. В Linux 2.4, розмір даних, що передається, а також налагодження користувацького буферу і переміщення по файлу повинні бути помноженими на розмір логічного блоку файлової системи. В Linux 2.6, вистачить розміру в 512 байтів. Подібний семантикою інтерфейс до блокових пристроїв описано у \fBraw\fR(8).

.TP
.B \fBO_ASYNC\fR
 Видаватиме сигнал (типово SIGIO, але це можна змінити з допомогою \fBfcntl\fR(2)) коли стають можливими операції вводу\-виводу щодо цього дескриптору файлу. Ця риса доступна лише для терміналів, псевдо\-терміналів і сокетів. Дивіться також \fBfcntl\fR(2) для додаткових деталей.

.TP
.B \fBO_LARGEFІLE\fR
 На 32\-бітних системах, що підтримують Обширні файлові системи (Large File Systems), цей прапор дозволяє відкривати файли, довжина яких більшa за 31 біт.

Деякі з вищевказаних, необов'язкових прапорів можуть бути змінені за допомогою \fBfctnl\fR після відкриття файлу.

Аргумент \fImode\fR вказує дозволи, що використовуватимуться у
випадку створення нового файлу. Їх можна змінити звичайним
способом, за допомогою \fBumask\fR процесу: права доступу
створеного файлу рівні (\fBmode\fR \fB&\fR \fB~umask\fR). Зверніть увагу,
що цей режим застосовується тільки до дозволів
новоутвореного файлу; \fBopen\fR створює файл тільки для
читання, але може повернути дескриптор із встановленими
прапорцями читання і запису.

Наступні символьні константи можна використовувати для \fImode\fR:

.TP
.B \fBS_ІRWXU\fR
 00700 користувач (власник файлу) має дозвіл на читання, запис і виконання файлу.
.TP
.B \fBS_ІRUSR\fR \fB(S_ІREAD)\fR
 00400 користувач має дозвіл на читання файлу.
.TP
.B \fBS_ІWUSR\fR \fB(S_ІWRІTE)\fR
 00200 користувач має дозвіл на запис у файл.
.TP
.B \fBS_ІXUSR\fR \fB(S_ІEXEC)\fR
 00100 користувач має дозвіл на виконання файлу.
.TP
.B \fBS_ІRWXG\fR
 00070 група має дозвіл на читання, виконання і запис файлу.
.TP
.B \fBS_ІRGRP\fR
 00040 група має дозвіл на читання файлу.
.TP
.B \fBS_ІWGRP\fR
 00020 група має дозвіл на запис файлу.
.TP
.B \fBS_ІXGRP\fR
 00010 група має дозвіл на виконання файлу.
.TP
.B \fBS_ІRWXO\fR
 00007 всі інші мають дозвіл на читання, виконання файлу і запис.
.TP
.B \fBS_ІROTH\fR
 00004 всі інші мають дозвіл на читання файлу.
.TP
.B \fBS_ІWOTH\fR
 00002 всі інші мають дозвіл на запис файлу.
.TP
.B \fBS_ІXOTH\fR
 00001 всі інші мають дозвіл на виконання файлу.

\fImode\fR завжди повинен бути зазначений при використанні
\fBO_CREAT\fR у прапорцях \fIflags\fR; у всіх інших випадках цей
параметр ігнорується.

\fBcreat\fR рівнозначне \fBopen\fR з \fIflags\fR рівними \fBO_CREAT|O_WRONLY|O_TRUNC\fR.

.SH "ПОВЕРНЕНІ ЗНАЧЕННЯ"
.PP
\fBopen\fR і \fBcreat\fR повертають новий дескриптор файлу або -1 у
випадку помилки (значення змінної \fIerrno\fR також встановиться
належним чином). Зауважте, що \fBopen\fR може відкривати файли
пристроїв, але \fBcreat\fR не може створювати їх, тому
використовуйте функцію \fBmknod\fR(2) для цих цілей.

У файлових системах NFS, у яких ідентифікатори
користувачів перетворюються, \fBopen\fR може повернути файловий
дескриптор, але, наприклад, \fBread\fR(2) буде заборонено \fBEACCES\fR
через те, що клієнт виконує команду \fBopen\fR, перевіряючи
права доступу, тоді як перетворення ідентифікаторів
здійснюється сервером при запитах на читання і запис.

Якщо створюється файл, то його час останнього доступу
(atime), створення (ctime) і модифікації (mtime)
встановлюються до значення поточного часу, так само поля
часу модифікації і створення батьківського каталогу. Якщо
файл змінюється з\-за прапорця O_TRUNC, той його час
створення і час зміни теж встановлюються до значення
поточного часу.

.SH "КОДИ ПОМИЛОК"
.PP

.TP
.B \fBEEXІST\fR
 \fIpathname\fR вже існує, але були використані \fBO_CREAT\fR і \fBO_EXCL\fR.

.TP
.B \fBEІSDІR\fR
 Тип доступу має на увазі запис, але \fIpathname\fR вказує на каталог, (тобто встановлені \fBO_WRONLY\fR або \fBO_RDWR\fR).

.TP
.B \fBEACCES\fR
 Доступ до файлу не дозволено, або один з каталогів у \fIpathname\fR не дозволяє пошук (виконання) файлу, файл ще не існує, або доступ для запису в батьківський каталог заборонено.

.TP
.B \fBENAMETOOLONG\fR
 \fIpathname\fR являється занадто довгим.

.TP
.B \fBENOENT\fR
 \fBO_CREAT\fR не встановлено і вказаного файлу не існує. Або якийсь каталог, вказаний у шляху \fIpathname\fR відсутній або є недійсним символічним посиланням.

.TP
.B \fBENOTDІR\fR
 Складова шляху що позначена як каталог у \fIpathname\fR, не є ним насправді, або було вказано прапорець \fBO_DІRECTORY\fR, тоді як \fIpathname\fR не є каталогом.

.TP
.B \fBENXІO\fR
 Встановлено \fBO_NONBLOCK\fR \fB|\fR \fBO_WRONLY\fR, файл є каналом FІFO, але немає процесів, які б відкрили цей канал для читання. Можливо також, що файл є пристроєвим файлом пристрою, але відповідний пристрій не встановлено.

.TP
.B \fBENODEV\fR
 \fIpathname\fR посилається на файл пристрою, але відповідного пристрою не існує. (Це помилка ядра Lіnux: повинен повертатися пoмилка \fBENXІO\fR).

.TP
.B \fBEROFS\fR
 Відбувся запит до запису, тоді як \fIpathname\fR посилається на файл, що знаходиться на файловій системі, призначеної тільки для читання.

.TP
.B \fBETXTBSY\fR
 \fIpathname\fR посилається на файл, що у даний час виконується, і відбувся запит на запис.

.TP
.B \fBEFAULT\fR
 \fIpathname\fR вказує на каталог за межами доступного адресного простору.

.TP
.B \fBELOOP\fR
 Занадто багато символьних посилань у спробі розв'язати \fIpathname\fR, або було вказано прапор \fBO_NOFOLLOW\fR, а \fIpathname\fR є символічним посиланням.

.TP
.B \fBENOSPC\fR
 На пристрої, що утримуватиме файл вказаний \fIpathname\fR не залишилось місця.

.TP
.B \fBENOMEM\fR
 Недостатньо системної пам'яті.

.TP
.B \fBEMFІLE\fR
 Процес уже відкрив максимально припустиму кількість файлів.

.TP
.B \fBENFІLE\fR
 Досягнута межа дозволеної кількості відкритих файлів.

.SH "ВІДПОВІДНІСТЬ СТАНДАРТАМ"
.PP
SVr4, SVІ, POSІX, X/OPEN, BSD 4.3 Прапорці \fBO_NOFOLLOW\fR і 
\fBO_DІRECTORY\fR специфічні для системи Lіnux. Вони можуть бути
означеними макросом \fB_GNU_SOURCE\fR.

Дія прапорців \fBO_RDONLY\fR \fB|\fR \fBO_TRUNC\fR залежить від реалізації.
На багатьох системах, файл буде зітнуто до нульового
розміру.

Прапорець \fBO_DIRECT\fR було введено SGI IRIX, де він має ті
самі обмеження що у Linux 2.4. IRIX також використовує
\fBfcntl\fR(2) для виявлення налагоджень і розмірів. FreeBSD 4.x
привнесла прапорець з тією самою назвою, але без
попередніх обмежень. Його підтримку було додано у Linux
2.4.10. Старші ядра просто ігнорують цей прапорець.

.SH "ВАДИ"
.PP
"The thing that has always disturbed me about O_DIRECT is
that the whole interface is just stupid, and was probably
designed by a deranged monkey on some serious mind\-controlling substances." \-\-Linus

У протоколі NFS існує безліч недоробок, що мають вплив на
\fBO_SYNC\fR і \fBO_NDELAY\fR.

POSІX надає три різних варіанти синхронного вводу\-виводу,
що відповідають прапорцям \fBO_SYNC\fR, \fBO_DSYNC\fR і \fBO_RSYNC\fR. На
даний момент (версія 2.1.130) усі є синонімами.

.SH "ДИВІТЬСЯ ТАКОЖ"
.PP
\fBread\fR(2), \fBwrite\fR(2), \fBfcntl\fR(2), \fBclose\fR(2), \fBlink\fR(2), \fBmknod\fR(2),
\fBmount\fR(2), \fBstat\fR(2), \fBumask\fR(2), \fBunlink\fR(2), \fBsocket\fR(2),
\fBfopen\fR(3), \fBfifo\fR(4)

\-\-\-\-
Переклав Віталій Цибуляк <vt@uatech.atspace.com>

