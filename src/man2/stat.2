." © 2005-2007 DLOU, GNU FDL
." URL: <http://docs.linux.org.ua/index.php/Man_Contents>
." Supported by <docs@linux.org.ua>
."
." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.2
." or any later version published by the Free Software Foundation;
." with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
." 
." A copy of the license is included  as a file called COPYING in the
." main directory of the man-pages-* source package.
."
." This manpage has been automatically generated by wiki2man.py
." This tool can be found at: <http://wiki2man.sourceforge.net>
." Please send any bug reports, improvements, comments, patches, etc. to
." E-mail: <wiki2man-develop@lists.sourceforge.net>.

.TH "stat" "2" "2007-10-27-16:31" "© 2005-2007 DLOU, GNU FDL" "2007-10-27-16:31"

." STAT 2 2006-11-27 Linux "Системні виклики" 

.SH "Назва"
.PP
stat, fstat, lstat \- одержують статус файлу 

.SH "Стисло"
.PP
\fB#include <sys/types.h>\fR 

.br

\fB#include <sys/stat.h>\fR 

.br

\fB#include <unistd.h>\fR 

\fBint stat(const char *\fR\fIfile_name\fR\fB, struct stat *\fR\fIbuf\fR\fB);\fR 

.br

\fBint fstat(int \fR\fIfiledes\fR\fB, struct stat *\fR\fIbuf\fR\fB);\fR 

.br

\fBint lstat(const char *\fR\fIfile_name\fR\fB, struct stat *\fR\fIbuf\fR\fB);\fR 

.SH "Опис"
.PP
Ці функції повертають інформацію про вказаний файл. Ви не зобов'язані володіти правами доступу до файлу, щоб отримати цю інформацію, тільки дозвіл на пошук тих каталогів, в якому знаходиться файл. 

\fBstat\fR видасть статистику щодо файлу, на який вказує \fIfile_name\fR, заповнюючи нею буфер \fIbuf\fR. 

\fBlstat\fR подібний до \fBstat\fR за винятком того, що у випадку символічного посилання, добувається інформація про саме посилання, а не файл, на який воно вказує. 

\fBfstat\fR також схожий на \fBstat ,\fR але статистичну інформацію можна отримати тільки щодо відкритого файлу (дивіться \fBopen\fR(2)), на який вказує дескриптор \fIfiledes\fR. 

Усі вони повертають структуру \fIstat\fR, яка містить наступні поля: 

.RS
.nf
      struct stat {
        dev_t      st_dev;     /* прилад */
        ino_t      st_ino;     /* індексний номер */
        mode_t     st_mode;    /* захист */
        nlink_t    st_nlink;   /* кількість жорстких посилань */
        uid_t      st_uid;     /* користувацький ID власника */
        gid_t      st_gid;     /* ID групи власника */
        dev_t      st_rdev;    /* тип приладу */
        off_t      st_size;    /* загальний розмір, в байтах */
        blksize_t  st_blksize; /* розмір блоку для операцій вводу/виводу */
        blkcnt_t   st_blocks;  /* кількість виділених блоків */
        time_t     st_atime;   /* час останнього доступу */
        time_t     st_mtime;   /* час останньої модифікації */
        time_t     st_ctime;   /* час останньої зміни статусу */
      };

.fi
.RE
Значення \fIst_size\fR містить розмір файлу в байтах (якщо це звичайний файл або символічне посилання). Розмір символічного посилання рівний довжині ланцюжка шляху, який він містить, без кінцевого NULL. 

Значення \fIst_blocks\fR включає розмір файлу, розбитий на 512\-байтові блоки. (Цей розмір може виявитись меншим за \fIst_size\fR/151, якщо файл містить дірки.) Значення \fIst_blksize\fR містить "бажаний" для ефективності операцій вводу/виводу розмір у блоках. (Запис до файлу менших відрізків може призвести до неефективного запису\-модифікації\-перезапису.) 

Не кожна файлова система Лінукса втілює всі поля часу. Деякі файлові системи дозволяють приєднання в такий спосіб, що доступ до файлу не спричинює оновлення поля \fIst_atime\fR. (Дивіться аргумент "noatime" в посібнику \fBmount\fR(8).) 

Поле \fIst_atime\fR змінюється після доступу до файлу, наприклад через \fBexecve\fR(2), \fBmknod\fR(2), \fBpipe\fR(2), \fButime\fR(2) і \fBread\fR(2) (якщо змінено більше за нуль байтів). Інші функції, такі як \fBmmap\fR(2) наприклад, можуть, а можуть і не оновлювати \fIst_atime\fR. 

Поле \fIst_mtime\fR змінюється модифікаціями файлу, наприклад за допомогою \fBmknod\fR(2), \fBtruncate\fR(2), \fButime\fR(2) і \fBwrite\fR(2) (якщо змінено більше за нуль байтів). Більше того, \fIst_mtime\fR каталогу змінюється у випадку створення або видалення файлів з цієї директорії. Поле \fIst_mtime\fR залишеться без змін, якщо поміняти власника або групу, кількість жорстких посилань тощо. 

Поле \fIst_ctime\fR змінюється у випадку запису або встановлення даних індексного вузла (тобто, інформації про власника, групу, кількість посилань, режим, і так далі.) 

Наступні макроси POSIX означено для перевірки типу файлу: 

.TP
.B \fBS_ISREG(\fR\fIm\fR\fB)\fR
 чи це звичайний файл? 

.TP
.B \fBS_ISDIR(\fR\fIm\fR\fB)\fR
 чи це каталог? 

.TP
.B \fBS_ISCHR(\fR\fIm\fR\fB)\fR
 чи це пристрій посимвольної передачі даних? 

.TP
.B \fBS_ISBLK(\fR\fIm\fR\fB)\fR
 чи це блоковий пристрій? 

.TP
.B \fBS_ISFIFO(\fR\fIm\fR\fB)\fR
 чи це FIFO? 

.TP
.B \fBS_ISLNK(\fR\fIm\fR\fB)\fR
 чи символічне посилання? (Немає в POSIX.1\-1996.) 

.TP
.B \fBS_ISSOCK(\fR\fIm\fR\fB)\fR
 чи це сокет? (Немає в POSIX.1\-1996.) 

Наступні прапорці означено для поля \fIst_mode\fR: 

.TP
.B 

\fB"S_IFMT     017000"\fR: бітова маска для біт\-полів файлового типу 

.TP
.B \fB"S_IFSOCK   0140000"\fR
 сокет 

.TP
.B \fB"S_IFLNK    0120000"\fR
 символічне посилання 

.TP
.B \fB"S_IFREG    0100000"\fR
 звичайний файл 

.TP
.B \fB"S_IFBLK    0060000"\fR
 блоковий пристрій 

.TP
.B \fB"S_IFDIR    0040000"\fR
 каталог 

.TP
.B \fB"S_IFCHR    0020000"\fR
 посимвольний пристрій 

.TP
.B \fB"S_IFIFO    0010000"\fR
 fifo 

.TP
.B \fB"S_ISUID    0004000"\fR
 встановлює біт UID 

.TP
.B \fB"S_ISGID    0002000"\fR
 встановлює біт GID 

.TP
.B \fB"S_ISVTX    0001000"\fR
 стійкий біт 

.TP
.B \fB"S_IRWXU    00700"\fR
 користувацька маска дозволів 

.TP
.B \fB"S_IRUSR    00400"\fR
 власник має дозвіл на читання 

.TP
.B \fB"S_IWUSR    00200"\fR
 власник має дозвіл на запис 

.TP
.B \fB"S_IXUSR    00100"\fR
 власник має дозвіл на виконання 

.TP
.B \fB"S_IRWXG    00070"\fR
 маска дозволів для групи 

.TP
.B \fB"S_IRGRP    00040"\fR
 група має довіл на читання 

.TP
.B \fB"S_IWGRP    00020"\fR
 група має дозвіл на запис 

.TP
.B \fB"S_IXGRP    00010"\fR
 група має дозвіл на виконання 

.TP
.B \fB"S_IRWXO    00007"\fR
 маска дозволів для решти користувачів (тих, хто не належать до групи) 

.TP
.B \fB"S_IROTH    00004"\fR
 решта має довіл на читання 

.TP
.B \fB"S_IWOTH    00002"\fR
 решта має довіл на запис 

.TP
.B \fB"S_IXOTH    00001"\fR
 решта має дозвіл на виконання 

Встановлення біту GID (\fBS_ISGID\fR) має декілька значень. Для каталогу він означає, що використовуватиметься семантика BSD \- створені там файли успадковують ID групи цього каталогу, а не згідно з чинним ID процесу, що створив файл. Створені там каталоги також отримають встановлений біт \fBS_ISGID\fR. Інше \- для файлів, які не мають встановленим біт виконання групою (\fBS_IXGRP\fR), GID вказує на обов'язкове блокування файлу (реєстраційного запису). 

Стійкий біт (\fBS_ISVTX\fR) у випадку каталогу означає, що файл у цьому каталозі може перейменувати або видалити тільки власник файлу, власник каталогу і root\-користувач. 

.SH "Повернені значення"
.PP
При вдалому виконанні, повертається нуль. У випадку помилки, буде повернено \-1 і \fIerrno\fR набуде відповідного значення. 

.SH "Коди помилок"
.PP

.TP
.B \fBEBADF\fR
 поганий дескриптор \fIfiledes .\fR 

.TP
.B \fBENOENT\fR
 Якась складова назви шляху \fIfile_name\fR не існує, або шлях вказано як порожній ланцюжок. 

.TP
.B \fBENOTDIR\fR
 Якась складова назви шляху не є каталогом. 

.TP
.B \fBELOOP\fR
 Забагато символічних посилань під час спроби розв'язання шляху. 

.TP
.B \fBEFAULT\fR
 Погана адреса. 

.TP
.B \fBEACCES\fR
 Відмова у доступі. 

.TP
.B \fBENOMEM\fR
 Недостатньо пам'яті (ядра). 

.TP
.B \fBENAMETOOLONG\fR
 Назва файлу занадто довга. 

.SH "Відповідність стандартам"
.PP
Виклики \fBstat\fR і \fBfstat\fR узгоджуються з SVr4, SVID, POSIX, X/OPEN, BSD 4.3. Виклик \fBlstat\fR відповідає 4.3BSD і SVr4. SVr4 згадує додаткові помилки \fBfstat\fR \- EINTR, ENOLINK і EOVERFLOW, а для \fBstat\fR і \fBlstat\fR \- EACCES, EINTR, EMULTIHOP, ENOLINK і EOVERFLOW. Використання полів \fIst_blocks\fR і \fIst_blksize\fR може виявитись не настільки портабельним. (Вони з'явилися в BSD і не згадуються POSIX. Їхня інтерпретація відрізняється в різних системах, і, можливо, на тій самій системі, коли приєднано файлову систему NFS.) 

У POSIX немає опису бітів S_IFMT, S_IFSOCK, S_IFLNK, S_IFREG, S_IFBLK, S_IFDIR, S_IFCHR, S_IFIFO, S_ISVTX, зате вимагається використання макросів \fBS_ISDIR()\fR тощо. Макросів \fBS_ISLNK\fR і \fBS_ISSOCK\fR немає в POSIX.1\-1996, зате очікуються в наступному виданні стандарту; перший макрос походить з SVID 4v2, тоді як другий \- з SUSv2. 

Unix V7 (і пізніші версії) мали S_IREAD, S_IWRITE, S_IEXEC, тоді як POSIX приписує синоніми S_IRUSR, S_IWUSR, S_IXUSR. 

.SH "Інші системи"
.PP
Значення, що використовувались (або надалі використовуються) на різноманітних системах: 

." FIXME: потрібно створити таблицю 
 
.TP
.B шістн.  назва    вивід ls  вісімк.  опис
 

.TP
.B ________________________________________
 

.TP
.B f000    S_IFMT             170000
 маска для типу файлу 

.TP
.B 0000                       000000
 непридатний індексний вузол (SCO); невідомий тип (BSD); SVID\-v2 і XPG2 мають обидва, 0 і 0100000 для звичайних файлів 

.TP
.B 1000    S_IFIFO  p|        010000
 fifo (іменований конвеєр) 

.TP
.B 2000    S_IFCHR  c         020000
 посимвольний пристрій (V7) 

.TP
.B 3000    S_IFMPC            030000
 мутьтиплексний посимвольний пристрій (V7) 

.TP
.B 4000    S_IFDIR  d/        040000
 каталог (V7) 

.TP
.B 5000    S_IFNAM            050000
 іменований файл XENIX з двома підтипами, що розрізняються значеннями st_rdev, рівними 1 і 2: 

.TP
.B 0001    S_INSEM  s         000001
 семафорний IFNAM\-підтип (XENIX) 

.TP
.B 0002    S_INSHD  m         000002
 IFNAM\-підтип спільних даних (XENIX) 

.TP
.B 6000    S_IFBLK  b         060000
 блочний пристрій (V7) 

.TP
.B 7000    S_IFMPB            070000
 мультиплексний блочний пристрій (V7) 

.TP
.B 8000    S_IFREG  \-         100000
 звичайний файл (V7) 

.TP
.B 9000    S_IFCMP            110000
 стиснений файл VxFS 

.TP
.B 9000    S_IFNWK  n         110000
 спеціальний мережний файл (HP\-UX) 

.TP
.B a000    S_IFLNK  l@        120000
 символічне посилання (BSD) 

.TP
.B b000    S_IFSHAD           130000
 тіньовий і\-вузол для ACL (невидимий з користувацького простору) (Solaris) 

.TP
.B c000    S_IFSOCK s=        140000
 сокет (BSD); так само S_IFSOC на VxFS) 

.TP
.B d000    S_IFDOOR D>        150000
 "дверцята" Solaris 

.TP
.B e000    S_IFWHT  w%        160000
 whiteout BSD (не використовується для і\-вузла) 

.TP
.B 0200    S_ISVTX            001000
 \e&"стійкий біт": зберігає текст в свопі, навіть після використання (V7); резервований файл (SVID\-v2); у випадку не\-каталогів: не кешувати цей файл (SunOS); у випадку не\-каталогів: прапорець обмеження видалення (SVID\-v4.2) 

.TP
.B 0400    S_ISGID            002000
 встановлює ID групи при виконанні (V7); у випадку каталогів: використовує семантуку BSD для встановлення ID групи 

.TP
.B 0400    S_ENFMT            002000
 примусове блокування файлів SysV 

.TP
.B 0800    S_ISUID            004000
 встановлює ID користувача при виконанні (V7) 

.TP
.B 0800    S_CDF              004000
 каталог являється файлом, залежним від контексту (HP\-UX) 

Стійкий біт з'явився у Версії 32V UNIX\-а від AT&T. 

.SH "Дивіться також"
.PP
\fBchmod\fR(2), \fBchown\fR(2), \fBreadlink\fR(2), \fButime\fR(2)

