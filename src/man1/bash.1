." © 2005-2007 DLOU, GNU FDL
." URL: <http://docs.linux.org.ua/index.php/Man_Contents>
." Supported by <docs@linux.org.ua>
."
." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.2
." or any later version published by the Free Software Foundation;
." with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
." 
." A copy of the license is included  as a file called COPYING in the
." main directory of the man-pages-* source package.
."
." This manpage has been automatically generated by wiki2man.py
." This tool can be found at: <http://wiki2man.sourceforge.net>
." Please send any bug reports, improvements, comments, patches, etc. to
." E-mail: <wiki2man-develop@lists.sourceforge.net>.

.TH "bash" "1" "2004 серпень 26 2007-10-27-16:31" "© 2005-2007 DLOU, GNU FDL" "GNU Bash-3.0"

{{TODO}}
{{FINISH}}

." Chet Ramey
." Information Network Services
." Case Western Reserve University
." chet@po.CWRU.Edu

." Last Change: Sat Jun 26 14:26:44 EDT 2004 

.SH "НАЗВА"
.PP

bash \- GNU Bourne\-Again SHell (Ще одна оболонка GNU Bourne)

.SH "ВИКОРИСТАННЯ"
.PP

.RS
.nf
 bash [опції] [файл]

.fi
.RE

.SH "АВТОРСЬКІ ПРАВА"
.PP

Bash is Copyright © 1989\-2004 by the Free Software Foundation, Inc

.SH "ОПИС"
.PP

Bash є sh\-сумісним інтерпретатором мови команд, що виконує команди прочитані зі стандартного потоку вводу чи з файлу. Bash також включає корисні риси з оболонок Korn та C (ksh та csh). 

Bash є спробою відповідної реалізації специфікації IEEE POSIX Shell and Tools (Робоча Група IEEE 1003.2)

.SH "КЛЮЧІ"
.PP

На додачу до односимвольних ключів оболонки, перелічених в опису до вбудованої команди \fBset\fR, \fBbash\fR розуміє наступні ключі під час виклику:
.TP
.B \-c \fIрядок\fR 
Якщо наявний ключ \fI\-c\fR, команди зчитуються з \fBрядка\fR. Якщо після \fBрядка\fR є арґументи, вони призначаються позиційним параметрам, починаючи з $0.
.TP
.B \-i 
Якщо присутній ключ \fI\-i\fR, оболонка стає інтерактивною.
.TP
.B \-l 
Примушує \fBbash\fR діяти так, ніби вона запущена в режимі \fIlogin\fR (дивись ВИКЛИК нижче).
.TP
.B \-r 
При наявності ключа \fB\-r\fR оболонка стає обмеженою (дивись розділ ОБМЕЖЕНА ОБОЛОНКА нижче).
.TP
.B \-s 
При наявності ключа \fB\-s\fR, або якщо після обробки ключів не залишається арґументів, тоді команди зчитуються зі стандартного пристрою вводу. Цей ключ дозволяє встановити позиційні параметри під час виклику оболонки в інтерактивному режимі.
.TP
.B \-D 
Перелік всіх подвійно\-екранованих рядків, що починаються з $, виводяться на стандартний пристрій виводу. Ці рядки є предметом перекладу, коли поточна локаль не є \fBC\fR або \fBPOSIX\fR. Цей ключ неявно вмикає ключ \fB\-n\fR; команди не будуть виконуватися.
.TP
.B \-+O [\fIshopt_ключ\fR] 
\fIshopt_ключ\fR — один з ключів оболонки, допущених для вбудованої команди \fBshopt\fR. Якщо присутній \fIshopt_ключ\fR, то \fB\-О\fR вмикає його, а \fB+О\fR — вимикає. Якщо \fIshopt_ключ\fR не вказаний, назви та значення ключів оболонки, що приймаються командою \fBshopt\fR, друкуються на стандартному пристрої вводу. Якщо вказана \fB+О\fR, те, що на виході, зображується в форматі, що може бути потім використаний для вводу.
.TP
.B \-\- 
Припиняє обробку ключів. Усі арґументи, що залишилися в командному рядку після цього ключа, трактуються як назва файлу й арґументи. Арґумент — еквівалентний \-\-.
.PP

\fBBash\fR також розуміє декілька багатосимвольних ключів. Для того, щоб ці ключі були впізнані оболонкою, необхідно їх розмістити в командному рядку перед односимвольними ключами.

.TP
.B \-\-dump\-po\-strings 
Цей ключ дорівнює \fB\-D\fR, але рядки видаються в форматі GNU gettext po.
.TP
.B \-\-dump\-strings 
Еквівалент \fB\-D\fR.
.TP
.B \-\-help 
Показує повідомлення про використання на стандартному пристрої виводу та виходить з успішним станом.
.TP
.B \-\-init\-file \fIфайл\fR 
.TP
.B \-\-rcfile \fIфайл\fR 
Виконує команди з 'файлу' замість стандартного особистого файлу ініціалізації ~/.bashrc, коли оболонка в інтерактивному режимі (дивись ВИКЛИК нижче).
.TP
.B \-\-login 
Еквівалент \fB\-l\fR.
.TP
.B \-\-noediting 
Не використовувати бібліотеку GNU readline для читання командних рядків ув інтерактивному режимі роботи оболонки.
.TP
.B \-\-noprofile 
Не виконувати ні системний файл ініціалізації /etc/profile, ні особисті файли ініціалізації ~/.bash_profile, ~/.bash_login чи ~/.profile. За вмовчанням, \fBbash\fR зчитує ці файли, коли вона викликається у режимі \fIlogin\fR (дивись ВИКЛИК нижче).
.TP
.B \-\-norc 
Не зчитує та не виконує особистий файл ініціалізації ~/.bashrc, коли оболонка в інтерактивному режимі. Цей ключ увімкнено за вмовчанням, якщо оболонка викликається як \fBsh\fR.
.TP
.B \-\-posix 
Змінює поведінку \fBbash\fR в тих випадках, коли типові дії \fBbash\fR відмінні від стандарту POSIX 1003.2, в бік відповідності до стандарту (режим posix).
.TP
.B \-\-rpm\-requires 
Створює список файлів, що необхідні для роботи скрипта оболонки. Ця опція означає ввімкнення \fB\-n\fR. Опція має деякі обмеження, такі як перевірка помилок часу компіляції, не проводиться розбір обернених лапок, [], test, тому деякі залежності можуть бути втрачені.
.TP
.B \-\-verbose 
Теж саме, що \fB\-v\fR
.TP
.B \-\-version 
Показує інформацію про версію цього примірника \fBbash\fR на стандартному пристрої вводу та виходить з успішним статусом.

.SH "АРҐУМЕНТИ"
.PP

Якщо після розбору ключів у командному рядку ще залишаються арґументи та не було вказано ні \fI\-c\fR, ні \fI\-s\fR, перший арґумент вважається назвою файлу, що містить команди оболонки (назвою файлу скрипта). В такому випадку, оболонка встановлює параметром $0 назву командного файлу, іншим позиційним параметрам надаються значення арґументів, що залишилися у командному рядку після назви командного файлу. \fBBash\fR зчитує та виконує команди з цього файлу, потім виходить. \fBBash\fR встановлює свій стан виходу рівним станові останньої команди в скрипті, що була виконана. Якщо \fBbash\fR не виконав жодної команди, стан виходу встановлюється у 0. Спочатку оболонка намагається відкрити файл у поточному каталозі й, якщо такого файлу немає, вона шукає цей файл у каталогах, що вказані у змінній PATH.

.SH "ВИКЛИК"
.PP

Початкова оболонка (login shell) — це оболонка, при виклику якої перший символ нульового аргументу встановлено у «\-», чи було вказано ключ \fI\-\-login\fR. 

Інтерактивна оболонка — це оболонка, запущена без аргументів, що не є ключами, та без ключа \fI\-с\fR, пристрої стандартного вводу та виводу якої підключені до терміналів (визначається викликом до isatty(3), або якщо при виклику було вказано ключ \fI\-i\fR. Якщо оболонка запущена інтерактивно, встановлюється змінна PS1, а змінна $\- включає \fBi\fR (як підрядок), дозволяючи скриптові оболонки чи файлові запуску (startup file) перевірити цей стан.

Наступні абзаци описують, як \fBbash\fR виконує свої файли запуску. Якщо один з файлів присутній, але не може бути прочитаний, \fBbash\fR повідомляє про помилку. Символи тильда (~) розкриваються в назвах файлів, про що описано в розділі РОЗКРИТТЯ, під заголовком «Розкриття тильд».

Коли \fBbash\fR викликаний як початкова інтерактивна оболонка, або як неінтерактивна оболонка з ключем \fI\-\-login\fR, вона зчитує та виконує  команди з файлу /etc/profile, якщо цей файл наявний. Після зчитування цього файлу, він переглядає ~/.bash_profile, ~/.bash_login, та ~/.profile (у вказаному порядку) та зчитує й виконує команди з першого файлу, що існує та може бути прочитаний. Можна використовувати опцію \fI\-\-noprofile\fR для заборони цієї поведінки.

Коли початкова оболонка закінчує свою роботу, \fBbash\fR зчитує та виконує команди з файлу ~/.bash_logout, якщо він існує.

Коли запускається інтерактивна оболонка, що не є початковою, \fBbash\fR зчитує та виконує команди з ~/.bashrc, якщо він існує. Це може бути заборонено використанням опції \-\-norc. Опція \fI\-\-rcfile \fBфайл\fR \fR примушує \fBbash\fR зчитувати та виконувати команди з вказаного файлу замість ~/.bashrc.

Коли \fBbash\fR запускається неінтерактивно (наприклад для виконання скрипту оболонки), вона переглядає змінну середовища BASH_ENV, розкриває її значення, якщо воно присутнє, та використовує розкрите значення як назву файлу для зчитування й виконання. \fBBash\fR поводиться так, наче виконуються команди: 

.RS
.nf
   if [ \-n "$BASH_ENV" ]; then . "$BASH_ENV"; fi

.fi
.RE
але значення змінної PATH не використовується при пошуку заданого файлу.

Якщо \fBbash\fR викликається з назвою \fBsh\fR, вона намагається відтворити поведінку запуску історичних версій \fBsh\fR якомога ближче, однак одночасно відповідаючи стандарту POSIX. За виклику як початкової інтерактивної оболонки, або ж неінтерактивної оболонки з ключем \fI\-\-login\fR, вона спочатку намагається зчитати та виконати команди з /etc/profile та ~/.profile, у вказаному порядку. Для заборони цієї поведінки може використовуватися ключ \fI\-\-noprofile\fR. Коли викликана як інтерактивна оболонка з назвою \fBsh\fR, \fBbash\fR шукає змінну ENV, розкриває її значення, якщо воно визначене, та використовує розкрите значення як назву файлу для зчитування та виконання команд. Позаяк оболонка, викликана як \fBsh\fR,  не виконує інших файлів запуску, ключ \fI\-\-rcfile\fR позбавлений змісту. Неінтерактивна оболонка, викликана з назвою \fBsh\fR, не намагається зчитувати жодного файлу запуску. Коли викликана як \fBsh\fR, \fBbash\fR входить у режим posix після виконання файлів запуску.

Коли \fBbash\fR викликається у режимі posix (коли у командному рядку зазначено ключ \fI\-\-posix\fR), вона дотримується стандарту POSIX для файлів запуску. У цьому режимі інтерактивні оболонки розкривають змінну ENV та зчитують і виконують команди з файлу, назва якого вказана у розкритому значенні змінної. Інші файли запуску не виконуються.

\fBBash\fR намагається визначити, чи її запустив демон віддаленої оболонки, зазвичай \fBrshd\fR. Якщо \fBbash\fR визначить, що вона викликана з \fBrshd\fR, вона зчитує та виконує команди з ~/.bashrc, якщо цей файл існує та може бути прочитаний. Вона не буде цього робити, коли викликана командою \fBsh\fR. Ключ \fI\-\-norc\fR використовується для заборони цієї поведінки, а ключ \fI\-\-rcfile\fR може використовуватися для вказівки використання іншого файлу запуску, але \fBrshd\fR зазвичай не викликає оболонку з цими ключами та не дозволяє їх вказати.

Якщо оболонка викликана у випадку, коли діючий ідентифікатор користувача або групи не співпадає зі справжнім, а ключ \fI\-p\fR не було вказано, файли запуску не викликаються, функції оболонки не вспадковуються з середовища, змінна SHELLOPTS, якщо вона наявна в середовищі, нехтується, а діючий ідентифікатор користувача прирівнюється до реального. Якщо вказати ключ \fI\-p\fR, поведінка при запуску не змінюється, однак діючий ідентифікатор користувача не скидається.

.SH "ВИЗНАЧЕННЯ"
.PP

В цьому документі використовуються наступні визначення:

.TP
.B прогалина(blank)
Пропуск чи табуляція.
.TP
.B слово
Послідовність символів, яку оболонка трактує цілісною одиницею. Також використовується термін \fBлексема\fR.
.TP
.B ім'я
Слово, що містить тільки цифри, літери та символ підкреслювання та починається з літери чи символу підкреслювання. Також використовується термін \fBідентифікатор\fR.
.TP
.B метасимвол
Символ, що ззовні екранування розділяє слова:
.br

     | & ; ( ) < > пропуск табуляція
.TP
.B керуючий символ
Лексема, що виконує функцію керування:
.br

     | || &  && ; ;; ( ) <новий рядок>

.SH "ЗАРЕЗЕРВОВАНІ СЛОВА"
.PP

Зарезервовані слова \- слова, що мають спеціальне значення для оболонки. Наступні слова є зарезервованими, коли використовуються ззовні екранування та коли використовуються в якості першого слова простої команди або третього слова команд case чи for:

\fB! case do done elif else easc fi for function if in select then until while { } time [[ ]]\fR

.SH "ГРАМАТИКА ОБОЛОНКИ"
.PP

.SS "Прості команди"
.PP

\fIПроста команда\fR \- це послідовність необов'язкових присвоєнь змінним, з наступними розділеними \fIпрогалинами\fR словами та перепризначеннями, що завершується \fIкеруючим символом\fR. Перше слово задає команду для виконання та передається як арґумент нуль. Решта слів передаються арґументами для запущеної команди. 

Повернене значення простої команди є станом її завершення, або 128+n, якщо команда перервана сигналом n.

.SS "Конвеєри"
.PP

\fIКонвеєр\fR \- це послідовність з однієї чи кількох команд, розділених символом |. Формат конвеєра такий:

.RS
.nf
         [time [\-p]] [ ! ] команда [ | команда2 ... ] 

.fi
.RE
Стандартний вивід \fBкоманди\fR під'єднується до стандартного вводу \fBкоманди2\fR. Це з'єднання відбувається до перенаправлень, що були вказані у команді (дивись ПЕРЕНАПРАВЛЕННЯ нижче).

Якщо зарезервоване слово \fB!\fR передує конвеєру, статус виходу цього конвеєру логічне заперечення статусу виходу останньої команди. У іншому випадку, статус виходу є статусом виходу останньої команди (без заперечення). Оболонка чекає припинення роботи всіх команд в конвеєрі перед виходом. 

Якщо зарезервоване слово \fBtime\fR передує конвеєру, загальний час виконання команди, а також час користувача та системи, що був використаний на виконання звітується по виході з конвеєру. Опція \fB\-p\fR змінює формат представлення на відповідний до стандарту \fBPOSIX\fR. Змінна \fBTIMEFORMAT\fR задає формат представлення інформації про час (Дивись опис \fBTIMEFORMAT\fR у розділі Змінні Оболонки нижче).

Кожна команда у конвеєрі виконується як окремий процес (тобто у підоболонці).

.SS "Списки"
.PP

\fBсписок\fR \- послідовність одного або більше конвеєрів розділених одним з операторів \fB;\fR, \fB&\fR, \fB&&\fR, \fB||\fR, та (необов'язково) закінчуються \fB;\fR, \fB&\fR або новим рядком.

Поміж цих операторів списку, && та || мають однаковий пріоритет, за ним йдуть оператори ; та &, що також мають однаковий пріоритет.

Для розмежування команд замість коми з крапкою у списку може використовуватись послідовність з одного чи декількох символів нового рядку.

Коли команда закінчується керуючим оператором &, оболонка виконує цю команду в фоні в підоболонці. Оболонка не чекає завершення виконання команди та повертає код статусу 0. Команди, що розділяються ; виконуються послідовно; оболонка чекає завершення кожної команди в порядку черги. Повертається код статусу останньої виконуваної команди. 

Оператори керування && та || позначають І списки та АБО списки, відповідно.

І список має форму

.RS
.nf
        команда1 && команда2

.fi
.RE
Команда2 виконується тоді і тільки тоді, коли команда1 повертає нульовий статус.
АБО список має форму

.RS
.nf
        команда1 || команда2

.fi
.RE
Команда2 виконується тоді і тільки тоді, коли команда1 повертає ненульовий статус.

Код статусу, що повертається І та АБО списками \- код статусу останньої виконуваної команди в списку.

.SS "Складені команди"
.PP

\fIСкладена команда\fR \- це одна з наступних команд:

.TP
.B \fIсписок\fR 
.br
\fIСписок\fR виконується у підоболонці. Присвоєння змінних та вбудовані команди, що впливають на середовище оболонки не зберігаються після завершення команд у списку. Повертається код статусу останньої команди у списку.

.TP
.B { \fIсписок\fR \fB;\fR }
.br
\fIСписок\fR просто виконується у поточному середовищі оболонки. \fIСписок\fR повинен закінчуватися символом нового рядку чи крапкою з комою. Повертається код статусу списку. Зауважте, що на відміну від метасимволів \fB(\fR та \fB)\fR, \fB{\fR та \fB}\fR є \fIзарезервованими словами\fR і тому повинні вживатися там, де дозволено використання зарезервованих слів. Вони повинні розмежовуватися від списку прогалиною, оскільки не є символами розмежування слів.

.TP
.B (( \fIвираз\fR ))
.br
\fIВираз\fR оцінюється відповідно до правил описаних в розділі ARITHMETIC EVALUATION. Якщо значення виразу ненульове, повертається значення 0, у іншому випадку повертається 1. Ця команда повністю еквівалентна до \fBlet "\fR \fIвираз\fR \fB"\fR

.TP
.B \fB[[\fR \fIвираз\fR \fB]]\fR
.br
Повертає статус 0 чи 1 в залежності від оцінювання умовного виразу \fIвираз\fR.
.br

Вирази складаються з primaries, що описані у розділі УМОВНІ ВИРАЗИ. 
Розділення слів та розширення шляхів не проводится у словах між \fB[[\fR та \fB]]\fR. Проводиться розширення символів тильда, параметрів та змінних,
арифметичне розширення, підстановка команд, підстановка процесів, та видалення лапок. 
При використанні операторів \fB==\fR та \fB!=\fR рядок праворуч від оператора вважається трафаретом (pattern) та співставляється відповідно до правил описаних у розділі Співставлення Tрафаретів. Повертається значення 0 у випадку, коли рядок співставляється з трафаретом, і 1 у іному випадку. Будь яка частина трафарету може бути взята в лапки для того, щоб вона співставлялась як рядок.
.br

Вираз може бути комбінованим з використанням наступних операторів, що перелічені у порядку зменшення пріоритету:
.br

.TP
.B     	
.br
\fB(\fR \fIвираз\fR \fB)\fR
.br
Повертає значення виразу. Використовується для зміни нормального пріоритету операторів у виразі
.br
\fB!\fR \fIвираз\fR
.br
    Правда, коли вираз є неправдою.
.br
\fIвираз1\fR \fB&&\fR \fIвираз2\fR
.br
    Правда, коли обидва \fIвираз1\fR та \fIвираз2\fR правдиві.
.br
\fIвираз1\fR \fB||\fR \fIвираз2\fR:
.br
    Правда, коли хоча б один з \fIвираз1\fR або :\fIвираз2\fR правдивий.
.br

Оператори \fB&&\fR та \fB||\fR не обчислюють \fIвираз2\fR, коли значення \fIвираз1\fR достатнє для визначення значення складеного умовного виразу.

.TP
.B for \fIназва\fR [ in \fIслова\fR ] ; do \fIсписок\fR ;  done
.br
Список слів, що слідкують за in розширюється, створюючи список елементів. Значення змінної з ім'ям \fIназва\fR встановлюється рівним значенню кожного елемента в цьому списку та список виконується при кожному присвоєнню Якщо \fIслово\fR пропущене команда виконує список для кожного позиційного параметра (дивись розділ ПАРАМЕТРИ). Код статусу, що повертається, встановлюється рівним статусу виходу останньої виконаної команди. Якщо розширення елементів, що слідкують за in отримує пустий список, команди не виконуються та повертається значення 0.

.TP
.B for (( \fIвираз1\fR ; \fIвираз2\fR ; \fIвираз3\fR )) ; do \fIсписок\fR ; done
.br
Спочатку, арифметичний вираз \fIвираз1\fR оцінюється відповідно до правил, що описані нижче у розділі ОБЧИСЛЕННЯ АРИФМЕТИЧНИХ ВИРАЗІВ. Потім оцінюється арифметичний вираз \fIвираз2\fR у циклі до того часу поки він не оціниться до 0. Кожного разу, коли \fIвираз2\fR оцінюється до ненульового значення виконується список та оцінюється значення арифметичного виразу \fIвираз3\fR. Якщо будь\-який з виразів опущено, команда поводиться так, ніби він оцінюється до 1. Повертається статус виходу останньої виконаної команди, або хибний статус, якщо не було виконано жодної команди.

.TP
.B \fBselect\fR \fIзмінна\fR [ \fBin\fR \fIслова\fR ] \fB; do\fR \fIсписок\fR  \fB; done\fR
.br
Список слів, що слідкують за in розширюється, створюючи список елементів. Набір розширених слів друкується на стандартному пристрої помилок. Перед кожним словом друкується число. Якщо \fBin\fR \fIслова\fR не було вказано, друкуються позиційні параметри (дивись розділ ПАРАМЕТРИ). Потім зображується підказка \fBPS3\fR та зчитується рядок зі стандартного вводу. Якщо рядок містить число, що відповідає одному з зображених слів, значення змінної \fIзмінна\fR встановлюється рівним вибраному слову. Якщо рядок пустий слова та підказка друкується знову. Якщо зчитано \fBEOF\fR, команда завершує свою роботи. Будь яке інше значення прочитане в рядку спричиняє встановлення змінної \fIзмінна\fR в null. Прочитаний рядок зберігається у змінній \fBREPLY\fR. \fIСписок\fR виконується після кожного вибору аж поки не буде виконано команду \fBbreak\fR.  Статус виходу \fBselect\fR встановлюється рівним статусу виходу останньої виконаної команди у \fIсписку\fR, або нулю, якщо не було виконано команд. 

.TP
.B \fBcase\fR \fIслово\fR \fBin\fR [ [(] \fIтрафарет\fR [ \fB|\fR  \fIтрафарет\fR ] ... ) \fIсписок\fR \fB;;\fR ] ... \fBesac\fR
.br
Спочатку команда \fBcase\fR розширює \fIслово\fR та намагається співставити до кожного трафарета по порядку, використовуючи ті ж самі правила, що й для розширення назв шляху (дивись Рокриття Назв Шляхів). Коли знаходиться співставлення, виконується відповідний список. Після першого співставлення не робиться спроби подальших співставлень. Статус виходу 0, якщо не було знайдено співставлення. В іншому випадку статус виходу встановлюється рівним статусу виходу останньої виконаної команди в \fIсписку\fR.

.TP
.B \fBif\fR \fIсписок\fR \fB; then\fR \fIсписок\fR \fB;\fR [ \fBelif\fR \fIсписок\fR \fB; then\fR \fIсписок\fR \fB;\fR ] ... [ \fBelse\fR \fIсписок\fR \fB;\fR ] \fBfi\fR
.br
Виконується \fBif\fR \fIсписок\fR.  Якщо його статус виходу нуль, тоді виконується \fBthen\fR \fIсписок\fR.   У іншому випадку,  кожен \fBelif\fR \fIсписок\fR виконується по порядку, і якщо його статус виходу нуль, виконується відповідний \fBthen\fR \fIсписок\fR та команда завершує свою роботу. У іншому випадку виконується \fBelse\fR \fIсписок\fR, ящко він присутній. Код виходу рівний коду виходу останньої виконаної команди, або нуль, якщо всі перевірені умови не справдились.

.TP
.B \fBwhile\fR \fIсписок\fR \fB; do\fR \fIdo_список\fR \fB;  done\fR
.br
\fBuntil\fR \fIсписок\fR \fB; do\fR \fIdo_список\fR \fB; done\fR
.br
Команда \fBwhile\fR безперервно виконує \fIdo_список\fR, поки \fIсписок\fR не поверне нульове значення. Команда \fBuntil\fR безперервно виконує \fIdo_список\fR, поки \fIсписок\fR не поверне ненульове значення. Значення статусу виходу команд \fBwhile\fR та \fBuntil\fR рівне статусу виходу останньої виконаної команди, або нуль, якщо жодної команди не було виконано.

.SS "Визначення функцій оболонки"
.PP

Функції оболонки є об'єктами, що викликаються як прості команди та виконують складену послідовність команд з новими ситуативними параметрами. Функції визначаються наступним чином:

.TP
.B [ \fBfunction\fR ] \fIназва\fR () { \fIсписок\fR \fB;\fR }
.br
Визначає функцію, що називається \fIназва\fR. Тіло функції \- список команд між \fB{\fR та \fB}\fR. Цей список виконується, коли \fIназва\fR вказана як назва простої команди. Статус виходу функції \- статус виходу останньої команди, що була виконана в тілі функції. (Дивись розділ ФУНКЦІЇ нижче).

.SH "КОМЕНТАРІ"
.PP

В оболонці, що не є інтерактивною, або в інтерактивній оболонці, в якій опція
\fBinteractive_comments\fR до вбудованої команди \fBshopt\fR ввімкнена (дивись ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ),
слово, що починається з \fB#\fR спричиняє ігнорування цього слова та всіх символів у рядку, що залишилися після цього слова.
Інтерактивна оболонка без ввімкненої опції \fBinteractive_comments\fR не дозволяє коментарів. В інтерактивній 
оболонці за замовчуванням опція \fBinteractive_comments\fR ввімкнена.

.SH "ЕКРАНУВАННЯ"
.PP

\fIЕкранування\fR (\fIquoting\fR) застосовується для того щоб позбавитись спеціального значення деяких знаків або слів для оболонки. Екранування може бути застосовано для позбавлення певної інтерпретації спеціальних знаків, для запобігання того щоб зарезервовані слова сприймались зарезервованими, також щоб запобігти розширенню параметрів.

Кожний із \fIметазнаків\fR у попередньому переліку під секцією ВИЗНАЧЕННЯ має спеціальне значення для оболонки повинен бути екранованим для того щоб відображати самих себе.

Коли застосовуються засоби доповнення команд з історії, відповідний спеціальний знак, звичайно \fB!\fR, повинен бути звільнено для того щоб запобігти вживанню команд з історії.

Існує три механізми екранування: \fIзнак запобігання\fR, одинарні лапки і подвійні лапки.

Не взятий у лапки обернений слеш (\fB\e\fR) є \fIзнаком запобігання\fR. Він зберігає буквальне значення знака що слідує за ним за винятком <\fIнової лінії\fR>. Якщо \fB\e\fR<нова лінія> пара має місце і обернений слеш сам по собі не є  екрановано, в такому випадку \fB\e\fR<нова лінія> сприймається як продовження тієї самої лінії (тобто нова лінія вилучається із потоку вводу і ефективно ігнорується).

Включення знаків у одинарні лапки зберігає буквальне значення кожного знаку всередині лапок. Одинарні лапки не можуть з'являтися всередині одинарних лапок, навіть із передуючим оберненим слешом.

Включення знаків у подвійні лапки зберігає буквальне значення кожного знаку всередині лапок за винятком \fB$\fR, \fB`\fR та \fB\e\fR. Знаки \fB$\fR та \fB`\fR зберігають їхнє спеціальне значення всередині подвійних лапок. Обернений слеш зберігає своє спеціальне значення якщо за ним слідує один із наступних знаків: \fB$\fR, \fB`\fR, \fB"\fR, \fB\e\fR або <нова лінія>. Подвійні лапки можуть бути екрановані всередині подвійних лапок з допомогою попереднього оберненого  слешу.

Спеціальні параметри \fB*\fR та \fB@\fR набувають спеціального значення коли знаходяться всередині подвійних лапок (дивись ПАРАМЕТРИ нижче).  Слова у вигляді \fB$\fR'\fIрядок\fR' сприймаються як спеціальні. Таке слово розкривається у \fIрядок\fR, екрановані оберненим слешом знаки при цьому замінюються так як описано у ANSI C стандарті. Послідовності, екрановані оберненим слешом, якщо присутні, розшифровується як наступне:

.TP
.B        	
.br
\fB\ea\fR          сигнал (дзвоник)
.br
\fB\eb\fR          крок назад (із стиранням)
.br
\fB\ee\fR          знак перемикача коду
.br
\fB\ef\fR          зміна сторінки
.br
\fB\en\fR          нова лінія
.br
\fB\er\fR          повернення каретки
.br
\fB\et\fR          горизонтальна табуляція
.br
\fB\ev\fR          вертикальна табуляція
.br
\fB\e\e\fR          обернений слеш
.br
\fB\e' \fR         одинарна лапка
.br
\fB\e\fR\fInnn\fR        восьми\-бітовий знак чиє значення є значенням октету \fInnn\fR (одна до трьох цифр)
.br
\fB\ex\fR\fIHH\fR        восьми\-бітовий знак чиє значення є значенням шістнадцяткового \fIHH\fR (одна або дві шістнадцяткових цифри)
.PP

Розвернений результат буде залапковано в одинарні лапки, виглядатиме так ніби знак долару навіть не був присутній.

Рядок у подвійних лапках із попереднім знаком долару (\fB$\fR) призведе до того що рядок буде інтерпретовано відповідно до теперішньої локалі. Якщо поточна локаль \fBC\fR або \fBPOSIX\fR, знак долару буде ігноровано. Якщо рядок переведено та замінено, заміна буде залапкована у подвійні лапки.

." Не досить зрозуміло що саме мається на увазі в останніх реченнях 

.SH "ПАРАМЕТРИ"
.PP

\fIПараметр\fR є одиницею що утримує значення. Параметром може бути назва, число або один із спеціальних знаків, перечислених нижче у Спеціальних Параметрах. Для цілей оболонки, змінна є параметром позначеним назвою. Змінна має \fIзначення\fR і нуль або більше \fIатрибутів\fR. Атрибути надаються за допомогою \fBdeclare\fR вбудованої команди (дивись \fBdeclare\fR у ВБУДОВАНИХ КОМАНДАХ ОБОЛОНКИ).

Параметр встановлено якщо йому було надано значення. Нульовий рядок є прийнятним значенням. Як тільки змінна була встановлена, вона може бути скасована лише \fBunset\fR вбудованою командою (дивись ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ нижче).

\fIЗмінній\fR може бути надано значення виразом у формі

.RS
.nf
          \fIім'я\fR=[\fIзначення\fR]

.fi
.RE
Якщо \fIзначення\fR не надано, змінній призначається нульовий рядок. Всі \fIзначення\fR підлягають розкриттю тильди, розкриттю параметрів і змінних, командній заміні, арифметичному розкриттю і вилученню екранування 
." (або залапкованості ) 
 (дивись РОЗКРИТТЯ нижче). Якщо змінна має встановленим \fBinteger\fR атрибут, тоді \fIзначення\fR підлягатиме арифметичному розширенню, навіть якщо $((...)) нотація не застосовується (дивись Арифметичне Розкриття нижче). Розділення слів не виконується, за винятком "\fB$@\fR", так як пояснено нижче у Спеціальних Параметрах. Розкриття шляху не виконується. Вирази присвоєння також можуть з'являтись у вигляді аргументів до \fBdeclare\fR, \fBtypeset\fR, \fBexport\fR, \fBreadonly\fR та \fBlocal\fR вбудованих команд.

.SS "Позиційні Параметри"
.PP

\fIПозиційним параметром\fR є параметр позначений одним або більше числом, за винятком одного числа 0. Позиційні параметри передаються із аргументів оболонки, коли вона запускається, і можуть бути призначені знова, використовуючи \fBset\fR вбудовану команду. Позиційні параметри не можуть отримувати значення з допомогою виразу присвоєння. Позиційні параметри тимчасово заміняються коли виконується функція (дивись ФУНКЦІЇ нижче). 
.br
Коли позиційний параметр, що складається більш ніж із однієї цифри, розкрито, він повиннен бути включений у фігурні дужки (дивись РОЗКРИТТЯ нижче).

.SS "Спеціальні Параметри"
.PP

Оболонка розглядає декілька параметрів як спеціальні. На ці параметри можна лише посилатись, присвоєння нового значення їм не дозволене.

.TP
.B *
.br
Розширюється до позиційних параметрів, починаючи з першого. Коли розширення відбувається всередині подвійних лапок, воно виглядає як одне слово із значеннями кожного параметру, розділеними першим знаком \fBIFS\fR спеціальної змінної. Тобто "\fB$*\fR" є еквіваленим "\fB$1\fR\fIc\fR\fB$2\fR\fIc\fR\fB...\fR", де \fB\fIc\fB\fR буде першим знаком значення що утримує \fBIFS\fR. Якщо \fBIFS\fR скасована (unset), параметри будуть розділені пробілом. Якщо \fBIFS\fR має невизначене значення (null), параметри зіллються в одне слово з\-за відсутності розділювача.
.TP
.B @
.br
Розширюється до позиційних параметрів, починаючи з першого. Коли вираз має місце всередині подвійних лапок, кожний параметр розширюється до окремого слова. Тобто, "\fB$@\fR" є еквівалентним "\fB$1\fR" "\fB$2\fR" ... Якщо немає позиційних параметрів, \fB"$@"\fR та \fB$@\fR розширюються до нічого (тобто вони видаляються).
.TP
.B #
.br
Розширюється до кількості позиційних параметрів, у вигляді десяткового числа.
.TP
.B ?
.br
Розширюється до статусу найостаннішого виконаного конвеєру із пріоритетною дією.
.TP
.B \-
.br
Розширюється до прапорців опцій які були дійсні під час виклику оболонки, і встановлені \fBset\fR вбудованою командою, або тих які оболонка сама встановила (\fB\-i\fR опція, наприклад).
.TP
.B $
.br
Розширюється до ID процесу оболонки. У () оболонці другого рівня розширюється до ID процесу дійсної оболонки, а не підоболонки.
.TP
.B !
.br
Розширюється до ID процесу останньої виконаної фонової (асинхронної) команди.
.TP
.B 0
.br
Розширюється до назви оболонки або самого скрипту. Це встановлюється при ініціалізації оболонки. Якщо \fBbash\fR викликано файлом з командами, \fB$0\fR буде утримувати назву цього файлу. Якщо \fBbash\fR викликано із \fB\-c\fR опцією, тоді \fB$0\fR отримує значення першого аргументу після рядка що повинен бути виконано, якщо аргумент присутній. Якщо ні, тоді \fB$0\fR набуває значення самого файлу що викликає bash із відсутнім аргументом. 
." сам не дуже зрозумів 

.TP
.B _
.br
При старті оболонки набуває значення абсолютного шляху до файлу самої програми оболонки або шел скрипту що виконується якщо такий був наданий у списку аргументів. Згодом розширюється до останнього аргументу попередньої команди. Також розширюється до повної назви кожної команди що виконана і поміщена у середовище експортоване цій команді 
." awk 'BEGIN{print ENVIRON["_"]}' 
. Коли перевіряється пошта, цей параметр утримує назву файлу пошти яка розглядається на даний момент.

.SS "Змінні Оболонки"
.PP

Наступні змінні встановлено оболонкою:
.TP
.B BASH 
Розширюється до повної назви файлу що започаткував цей окремий випадок bash.
.TP
.B BASH_VERSINFO 
Змінна масиву, для читання тільки, яка утримує версію оболонки яка в даний момент діє. Значення присвоєні елементам масиву є наступними:

.TP
.B    	
.br
\fBBASH_VERSINFO[0]\fR      Головне число версії (the release).
.br
\fBBASH_VERSINFO[1]\fR      Другорядне число версії (the version).
.br
\fBBASH_VERSINFO[2]\fR      Версія латки.
.br
\fBBASH_VERSINFO[3]\fR      Версія побудови.
.br
\fBBASH_VERSINFO[4]\fR      Статус релізу (наприклад beta1).
.br
\fBBASH_VERSINFO[5]\fR      Значення \fBMACHTYPE\fR.

.TP
.B BASH_VERSION 
Розширюється до рядка що описує версію діючої оболонки.
.TP
.B COMP_CWORD 
Індекс у \fB${COMP_WORDS}\fR слова яке утримує теперішню позицію курсора. Ця змінна доступна тільки у функціях оболонки викликаних засобами програмованого вивершення (дивіться Програмоване Вивершення нижче).       
.TP
.B COMP_POINT 
Індекс теперішньої позиції курсора відносно початку теперішньої команди. Якщо теперішня позиція курсора знаходиться в кінці поточної команди, то значення змінної дорівнює \fB${#COMP_LINE}\fR. Ця змінна доступна тільки у функціях оболонки та зовнішніх командах викликаних програмованими засобами вивершення (дивіться Програмоване Вивершення нижче).
.TP
.B COMP_WORDS 
Змінна масиву (дивіться Масиви нижче) яка складається із окремих слів на поточній командній лінії. Ця змінна доступна тільки у функціях оболонки викликаних програмованими засобами вивершення (дивіться Програмоване Вивершення нижче).
.TP
.B DIRSTACK 
Змінна масиву (дивіться Масиви нижче) що втримує поточний вміст стеку директорій. Директорії розміщені у стеку у тій самій послідовності в якій вони з'являються при виконанні \fBdirs\fR вбудованої функції. Надання нового значення окремим елементам цього масиву може використовуватись для того щоб змінювати директорії що вже знаходяться у стеку, але лише за допомогою \fBpushd\fR та \fBpopd\fR ,вбудованих функцій, можна додавати та вилучати зі стеку. Пряме присвоєння \fBDIRSTACK\fR не змінить поточну директорію. Якщо \fBDIRSTACK\fR скасовано (unset), вона втрачає свої спеціальні властивості, навіть якщо пізніше перезаладувати її.
.TP
.B EUID 
Розширюється до дійсного ID теперішнього користувача, встановленого при старті оболонки. Ця змінна тільки для читання.
.TP
.B FUNCNAME 
Назва поточної діючої функції. Ця змінна існує тільки якщо якась функція оболонки запущена. Надання нового значення \fBFUNCNAME\fR не матиме ніякого ефекту і видасть повідомлення про помилку. Якщо \fBFUNCNАМE\fR скасовано (unset), вона втрачає свої спеціальні властивості, навіть якщо пізніше перезаладувати її.
.TP
.B GROUPS 
Змінна масиву що утримує список груп в яких числиться теперішній користувач. Надання нових значень \fBGROUPS\fR не діятиме і видасть повідомлення про помилку. Якщо \fBGROUPS\fR скасовано (unset), вона втрачає свої спеціальні властивості, навіть якщо пізніше перезаладувати її.
.TP
.B HISTCMD 
Номер з історії, або індекс у списку історії поточної команди. Якщо \fBHISTCMD\fR скасовано (unset), вона втрачає свої спеціальні властивості, навіть якщо пізніше перезаладувати її.
.TP
.B HOSTNAME 
Автоматично набуває значення назви теперішнього хоста.
.TP
.B HOSTTYPE 
Автоматично набуває значення рядка що являється унікальним описом типу машини на якому \fBbash\fR виконується в даний момент. Значення по замовчуванню є залежним від системи.
.TP
.B LINEO 
Кожний раз як свертаються до цієї змінної, оболонка замінює її значення на десяткове число, що відповідає номеру поточної лінії (починаючи з 1) всередині скрипта або функції. По\-за межами скрипта або функції, значення цієї змінної не гарантовано що матиме сенс. Якщо \fBLINEO\fR скасовано (unset), вона втрачає свої спеціальні властивості, навіть якщо пізніше перезаладувати її.  
.TP
.B MACHTYPE 
Автоматично набуває значення рядка що описує тип системи на якій виконується \fBbash\fR у стандартному GNU \fIпроцесор\-компанія\-система\fR форматі. Зачення по замовчуванню є залежним від системи.
.TP
.B OLDPWD 
Попередня робоча директорія що встановлюється \fBcd\fR командою.
.TP
.B OPTARG 
Значення останнього аргументу для обробки \fBgetopts\fR вбудованою командою (дивіться ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ нижче).
.TP
.B OPTIND 
Індекс наступного аргументу що буде оброблено \fBgetopts\fR вбудованою командою (дивіться ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ нижче).
.TP
.B OSTYPE 
Автоматично набуває значення рядка що описує операційну систему на якій виконується \fBbash\fR. По замовчуванню є залежним від системи.
.TP
.B PIPESTATUS 
Змінна масиву (дивіться Масиви нижче) що утримує список кодів статусу закінчення процесів найостанніших виконаних конвеєрів із пріоритетною дією (які можуть вміщати лише одну команду).
.TP
.B PPID 
ID батьківського процесу оболонки. Ця змінна тільки для читання.
.TP
.B PWD 
Поточна робоча директорія, встановлена \fBcd\fR командою.
.TP
.B RANDOM 
Кожний раз як звертаються до цієї змінної, генерується випадкове число між 0 та 32767. Ряд випадкових чисел можна видобути шляхом надання значення \fBRANDOM\fR. Якщо \fBRANDOM\fR скасовано (unset), вона втрачає свої спеціальні властивості, навіть якщо пізніше перезаладувати її.
.TP
.B REPLY 
Набуває значення лінії вводу що читається \fBread\fR вбудованою командою, якщо \fBread\fR вживається без аргументів.
.TP
.B SECONDS 
Кожний раз як звертаються до цієї змінної, повертається число секунд з моменту виклику оболонки. Якщо якесь значення присвоюється \fBSECONDS\fR тоді значення повернене наступними звертаннями до неї буде час з моменту присвоєння плюс значення що було присвоєне. Якщо \fBSECONDS\fR скасовано (unset), вона втрачає свої спеціальні властивості, навіть якщо пізніше перезаладувати її.
.TP
.B SHELLOPTS 
Список розділених комою опцій оболонки. Кожне слово у списку є чинним аргументом для \fB\-o\fR опції \fBset\fR вбудованої команди (дивіться ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ нижче). Опції що з'являються у \fBSHELLOPTS\fR є тими самими що й ті які показані як \fIon\fR при \fBset \-o\fR команді. Якщо ця змінна присутня у середовищі коли \fBbash\fR стартує, кожна опція зі списку буде увімкнена перед тим як читати будь\-які стартові файли. Ця змінна тільки для читання.
.TP
.B SHLVL 
Збільшується на один кожний раз як нова копія \fBbash\fR започаткована.
.TP
.B UID 
Розширюється до користувацького ID поточного користувача. Започатковується при старті оболонки. Ця змінна тільки для читання.
.PP

Наступні змінні використовуються оболонкою. В окремих випадках \fBbash\fR надає значення по замовчуванню змінним, ці випадки відмічені нижче.

.TP
.B BASH_ENV 
Якщо цей параметр встановлено під час коли \fBbash\fR виконує шел скрипт, значення змінної інтерпретується як назва файлу що містить команди для ініціалізації оболонки, як, наприклад, ~/.bashrc. Значення змінної \fBBASH_ENV\fR піддається розширенню параметра, заміні команди і арифметичному розширенню до того  як воно інтерпретується як назва файлу. Змінна \fBPАTH\fR не використовується для того щоб знайти назву файлу.
.TP
.B CDPATH 
Пошуковий шлях \fBcd\fR команди. Являється списком, з розділеними двокрапкою директоріями в яких оболонка шукає піддиректорії, вказані \fBcd\fR командою. Зразок значення як ця змінна може втримувати: ``.:~:/usr''.
.TP
.B COLUMNS 
Використовується \fBselect\fR вбудованою командою щоб з'ясувати ширину терміналу для видруковування списків вибору. Автоматично встановлюється після отримання 
." (значення?) 
 SIGWINCH.
.TP
.B COMPREPLY 
Змінна масиву з якої \fBbash\fR вичитує можливі вивершення, згенеровані функцією оболонки, визваної засобами програмованого вивершення (дивіться Програмоване Вивершення нижче).
.TP
.B FCEDIT 
Редактор по замовчуванню для \fBfc\fR вбудованої команди.
.TP
.B FIGNORE 
Розділений двокрапкою список суфіксів які будуть ігноруватись під час розширення назви файлів (дивіться READLINE нижче). Файл чий суфікс збігається із одним із вказаних у списку буде виключено зі списку назв файлів що півпадають під шаблон. Зразок значення: ``.o:~''
.TP
.B GLOBIGNORE 
Розділений двокрапкою список зразків що визначають набір назв файлів які будуть ігноруватись при розширенню шляхів. Якщо назва файлу що співпадає із зразком розширення шляху також співпадає із одним із зразків у \fBGLOBIGNORE\fR, тоді ця назва вилучається зі списку співпадань.
.TP
.B HISTCONTROL 
Якщо набуває значення \fIignorespace\fR, тоді лінії що починаються з пробілів не вносяться у список історії. Якщо набуває значення \fIignoredups\fR, лінії що співпадають з попередніми не добавляються Значення \fIignoreboth\fR комбінує обидві опції. Якщо змінну скасовано (unset) або вона набуває значення відмінного від перечислeних, тоді всі лінії, прочитані синтаксичним аналізатором, зберігаються у списку історії. Дія цієї змінної витісняється змінною \fBHISTIGNORE\fR. Друга і послідуючі лінії складної команди що простяглась на декілька ліній не перевіряються і додаються до історії, незалежно від значення \fBHISTCONTROL.\fR
.TP
.B HISTFILE 
Назва файлу у якій історія команд буде збережена (дивіться ІСТОРІЯ нижче). Значенням по замовчуванню є ~/.bash_history. Якщо скасована (unset), командна історія не зберігається при інтерактивній оболонці.
.TP
.B HISTFILESIZE 
Максимальне число ліній у файлі історії. Надаючи цій змінній значення можна добитись того що файл історії буде скорочено, при необхідності, щоб у ньому поміщалось не більше ніж вказана кількість ліній. Значенням по замовчуванню є 500. Файл історії також скорочується до цього числа після запису у нім під час завершення роботи інтерактивної оболонки.
.TP
.B HISTIGNORE 
Розділений двокрапкою список зразків що використовується для того щоб відсіювати лінії що будуть збережені у списку історії. Кожний зразок прикріплений до початку лінії і повинен співпадати із цілою лінією (не можна використовувати лише `*'). Кожний зразок порівнюється з лінією після того як перевірки вказані у \fBHISTCONTROL\fR мали місце. На додаток до звичайних знаків шаблону, характерних для оболонки, `\fB&\fR ' співпадає із попередньою лінією історії. `\fB&\fR ' може бути екранований з допомогою оберненого слешу; обернений слеш буде видалено перед спробою співпадання. Друга і послідуючі лінії у випадку складної команди що простяглась на декілька ліній не перевіряються і додаються до історії не залежно від значення \fBHISTIGNORE\fR.
.TP
.B HISTSIZE 
Кількість команд для запам'ятовування у історії команд (дивіться ІСТОРІЯ нижче). Значення по замовчуванню є 500.
.TP
.B HOME 
Домашня директорія поточного користувача; аргумент по замовчуванню для \fBcd\fR вбудованої команди. Значення цієї змінної також використовується при розширенні тильди.
.TP
.B HOSTFILE 
Містить назву файла в тому самому форматі що й /etc/hosts, файл буде прочитано в випадку коли оболонка повинна виповнити назву хоста. Список можливих виповнень назв хоста може бути змінений під час роботи оболонки. При наступній спробі виповнення назв хостів після того як значення змінної змінилось, \fBbash\fR додає вміст нового файла до існуючого списку (хостів). Якщо \fBHOSTFILE\fR започатковано, але вона на містить ніякого значення, \fBbash\fR пробує читати /etc/hosts для того щоб отримати список можливих виповнень назв хостів. Коли \fBHOSTFILE\fR скасовано, список назв хостів очищується.
.TP
.B IFS 
\fIВнутрішній розділювач полів\fR (Internal Field Separator) що використовується для розділення слів після розширення а також для розділення ліній в окремі слова, після використання \fBread\fR вбудованої команди. Значенням по замовчуванню є ``<пробіл><табуляція><нова лінія>''.
.TP
.B IGNOREEOF 
Контролює реакцію інтерактивної оболонки на отримання винятково \fBEOF\fR знаків при вводі. Якщо започаткована, повинна утримувати число що вказуватиме кількість \fBEOF\fR що повинно бути введено як перший знак вводу до того як \fBbash\fR завершить свою роботу. Якщо змінна існує, але не має значення у вигляді цифри, або значення взагалі, то по замовчуванню значенням буде 10. Якщо змінну не започатковано, тоді один \fBEOF\fR буде означати припинення вводу для оболонки.
.TP
.B INPUTRC 
Назва стартового файла для \fBreadline\fR що замінить дефолтовий ~/.inputrc (дивіться READLINE нижче).
.TP
.B LANG 
Визначає значення локалі для любої категорії що не була прямо вказана змінними що починаються з \fBLC_\fR.
.TP
.B LC_ALL 
Ця змінна пересилює значення \fBLANG\fR або любої іншої \fBLC_\fR змінної що вказує категорію локалі.
.TP
.B LC_COLLATE 
Визначає порядок сортування результатів розширення назв шляхів, також поводження виразів діапазону, класів еквівалентності і співпадаючі послідовності всередині розширення назв шляхів та співпадання із шаблонами.
.TP
.B LC_TYPE 
Ця змінна визначає інтерпретацію знаків і поводження класів знаків всередині розширення назв шляхів і співпадання із шаблонами.
.TP
.B LC_MESSAGES 
Ця змінна визначає локаль що буде використано для перекладу рядків взятих у подвійні лапки і з передуючим \fB$\fR.
.TP
.B LC_NUMERIC 
Ця змінна визначає категорію локалі для форматування чисел.
.TP
.B LINES 
Використовується \fBselect\fR вбудованою командою для того щоб визначити довжину стовпчиків для видруку списків селекції. Автоматично встановлюється після отримання SIGWINCH.
.TP
.B MAIL 
Якщо цей параметр встановлено як назва файла і змінну \fBMAILPATH\fR не започатковано, \fBbash\fR буде повідомлювати користувача про нову пошту у вказаному файлі.
.TP
.B MAILCHECK 
Вказує як часто (в секундах) bash перевіряє пошту. По замовчуванню це 60 секунд. Коли час перевірити пошту, bash зробить це перед тим як відобразити запрошення
." або підказку 
. Якщо цю змінну скасовано (\fBunset\fR), або надано значення у вигляді числа яке не являється більшим або рівним нулю, шел унеможливить перевірку пошти.
.TP
.B MAILPATH 
.br
Розділений двокрапкою список назв файлів що будуть перевірятись на наявність пошти. Повідомлення, що буде видрукувано з появою нової пошти у певному файлі, може бути вказане шляхом відділення назви файлу від повідомлення `?' знаком. Коли змінну \fB$_\fR застосовано всередині тексту повідомлення, вона розширюється до назви поточного файлу пошти. Наприклад:
.br
\fBMAILPATH\fR='/var/mail/bfox?"You have mail":~/Mail/read?"$_ has mail!"'
.br
\fBBash\fR надає значення по замовчуванню цій змінній, але розташування поштових файлів користувача яке \fBbash\fR використовує є залежним від системи (наприклад, /var/mail/\fB$USER\fR).
.TP
.B OPTERR 
Якщо надано значення 1, \fBbash\fR буде відображати повідомлення про помилки, що генеруються \fBgetopts\fR вбудованою командою (дивіться ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ нижче). \fBOPTERR\fR ініціалізується із             значенням 1 кожний раз як викликається оболонка або запускається скрипт.
.TP
.B PATH 
Шлях пошуку команд. Є розділеним двокрапкою списком директорій в яких оболонка шукає команди (дивіться ВИКОНАННЯ КОМАНД нижче). Шлях по замовчуванню є залежним від системи і встановлюється адміністратором який інсталював \fBbash\fR. Поширеним значенням є
.br
          ``/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin:.''.
.TP
.B POSIXLY_CORRECT 
Якщо ця змінна присутня в середовищі під час запуску \fBbash\fR, оболонка набуває \fIposix стану\fR (posix mode) до того як прочитати стартові файли, так ніби була надана \fB\-\-posix\fR опція під час виклику. Якщо змінна встановлена під час роботи оболонки, \fBbash\fR уможливлює \fIposix стан\fR, так ніби \fBset \-o posix\fR було виконано.
.TP
.B PROMPT_COMMAND 
Якщо встановлена, значення змінної буде виконано як команда перед появою кожного головної підказки (prompt).
.TP
.B PS1 
Значення цього параметра розширюється і використовується як рядок головної підказки. Значенням по замовчуванню є ``\fB\es\-\ev\e$ \fR''.
.TP
.B PS2 
Значення цього параметра розширюється так само як і \fBPS1\fR і використовується для другорядної підказки. По замовчуванню ``\fB>\fR''.
.TP
.B PS3 
Значення цього параметра використовується як підказка для \fBselect\fR команди (дивіться ГРАМАТИКА ОБОЛОНКИ вище).
.TP
.B PS4 
Значення цього параметру розширюється так само як і \fBPS1\fR, результат видруковується перед кожнoю командою що \fBbash\fR виводить під час трасування виконання. Перший знак \fBPS4\fR може повторюватись багато разів, якщо необхідно, для того щоб вказати кількість проміжних рівнів. По замовчуванню є ``\fB+\fR''.

.TP
.B TIMEFORMAT 
Значення цього параметру використовується як рядок форматування що вказує як інформація часу для конвеєрів із \fBtime\fR префіксом буде відображена. Знак \fB%\fR відіграє роль керівної послідовності що розширюється до значення часу або другої інформації. Керівні послідовності і їхні значення (квадратні дужки означають необов'язкові частини):
.br
\fB%%\fR           Буквальний знак \fB%\fR.
.br
\fB%[p][l]R\fR      Час що минув у секундах.
.br
\fB%[p][l]U\fR      Число секунд ЦП, проведених у користувацькому режимі.
.br
\fB%[p][l]S\fR      Число секунд ЦП, проведених у системному режимі.
.br
\fB%P\fR            Процент ЦП, обчислений дією (%U + %S) / %R.
.br
Необов'язковий \fIp\fR є числом що вказує на точність, тобто кількість десяткових чисел після крапки. Значення 0 спричиняє до того що жодного десяткового числа не буде відображено. Максимум три числа після крапки може бути вказано, якщо значення  \fIp\fR є більшим за 3, то воно змінюється на 3. Якщо \fIp\fR не вказане, вживається 3.
.br
Необов'язковий \fBl\fR вказує на довший формат, включаючи хвилини, у формі \fIMM\fRm\fISS\fR.\fIFF\fRs. Значення \fIp\fR визначає будуть десяткові числа (\fIFF\fR) включені чи ні.
.br
Якщо ця змінна не започаткована, \fBbash\fR удає ніби вона має значення \fB $'\enreal\et%3lR\enuser\et%3lU\ensys%3lS' \fR. Якщо значення є нульовим, ніякої інформації часу не відображається. Кінцева нова лінія додається автоматично при виведені форматованого рядка.

.TP
.B TMOUT 
Якщо надано значення більше за нуль, це значення інтерпретується як кількість секунд очікуваних оболонкою для користувацького вводу після виведеня головної підказки. \fBBash\fR закінчить свою дію, почекавши це число секунд, якщо не надійшло ніякого вводу.
.TP
.B auto_resume 
Ця змінна контролює як оболонка взаємодіє з користувачем і керуванням завдань. Якщо ця змінна встановлена, прості команди що складаються з одного слова, без перенаправлень, розглядаються як можливі ключі для відновлення поточних зупинених завдань. Не дозволяється ніяка двозначність, якщо існує більше ніж одне завдання, що починається з того самого надрукованого рядка, найостанніше завдання, до якого мали доступ, буде вибрано. \fIНазва\fR зупиненого завдання в цьому контексті є командною лінією що буде використана для відновлення завдання. Якщо змінна отримує значення \fIexact\fR, введений рядок повинен повністю співпадати із зупиненим завданням, якщо значенням є \fIsubstring\fR, введений рядок може співпадати лише із частиною рядка зупиненого завдання. Значення \fIsubstring\fR надає функціональність аналогічну до \fB%?\fR ідентифікатора завдання  (дивіться КОНТРОЛЬ ВИКОНАННЯ РОБІТ нижче). Якщо отримує якесь інше значення, то це значення повинно бути префіксом до рядка зупиненого завдання; це забезпечує функціональність аналогічну до \fB%\fR ідентифікатора завдання.
.TP
.B histchars 
Два або три знака що контролюватимуть \fIрозкриття історії\fR та лексеми (дивіться РОЗКРИТТЯ ІСТОРІЇ нижче). Перший знак є знаком розширення історії, знак що дасть сигнал початку розширенню історії, звичайно ` \fB!\fR '. Другий знак буде знаком \fIшвидкої заміни\fR, який служить скороченням заміни попередньо введеної команди новою. По замовчуванню є ` \fB^\fR '
." ^ls^ls -l 
. Третій, необов'язковий, знак вказує на те що все що за ним слідує є коментарем при розширені історії, звичайно ` \fB#\fR '. Знак коментування історії спричиняє до того що заміну історії буде уникнено для решти слів на лінії. Він не обов'язково означає що аналізатор оболонки буде сприймати решту лінії як коментар.

.SS "Масиви"
.PP

\fBBash\fR надає змінні одновимірного масиву. Люба змінна може бути використана як масив; вбудована функція \fBdeclare\fR відкрито декларує масив. Максимальний розмір масиву не є встановленим, так само як і  необов'язковість того щоб окремі елементи масиву були індексованими або їм надавалось значення по порядку. Масиви індексуються за допомогою цілих чисел і індексація починається з нуля.

Масив створюється автоматично якщо змінній надається значення, використовуючи синтаксис \fIназва\fR[\fIіндекс\fR]=\fIзначення\fR. \fIІндекс\fR розглядається як арифметичний вираз що повинен бути оцінений як число більше або рівне нулю. Щоб відкрито декларувати масив, використовуйте \fBdeclare \-a\fR \fIназва\fR (дивіться ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ нижче).  \fBdeclare \-а\fR \fIназва\fR\fB[\fR\fIіндекс\fR\fB]\fR також дозволене, \fIіндекс\fR частина просто ігнорується. Можна вказати атрибути масиву з допомогою \fBdeclare\fR та \fBreadonly\fR вбудованих функцій. Атрибути дійсні для всіх членів масиву.

Масивам надається значення з допомогою складених присвоєнь що мають форму \fIназва\fR=\fB(\fR\fIзначення1\fR ... \fIзначенняn\fR\fB)\fR, тоді як кожне \fIзначення\fR має форму [\fIіндекс\fR]=\fIрядок\fR. Тільки \fIрядок\fR є обов'язковим. Якщо, факультативні, квадратні дужки та індекс вказані, тоді саме елементу з цим індексом надається значення, в протилежному випадку індексом елемента над яким відбувається дія присвоєння стане останній індекс останнього елемента якому присвоїли значення плюс один. Індексація починається з нуля. Цей   синтаксис також визнається вбудованою \fBdeclare\fR. Індивідуальним елементам масиву може надаватись начення використовуючи, вище згаданий,  \fIназва\fR[\fIіндекс\fR]=\fIзначення\fR синтаксис.

До любого елементу в масиві можна звернутися, користуючись ${\fIназва\fR[\fIіндекс\fR]}. Використання фігурних дужок бажане щоб уникнути конфліктів із розширенням шляхів. Якщо \fIіндексом\fR буде \fB@\fR або \fB*\fR, то вираз розшириться у всі елементи масиву. Поводження індексів відмінне коли       вираз включено у подвійні лапки. Якщо вираз включено в подвійні лапки, ${\fIназва\fR[*]} розширюється до одного слова із значенням кожного елемента масиву розділених першим знаком \fBIFS\fR спеціальної змінної, і ${\fIназва\fR[@]} розширює кожний елемент масиву у окреме слово. При відстності елементів у масиві, ${\fIназва\fR[@]} розширюється до нічого. Це аналогічно розширенню спеціальних параметрів \fB*\fR та \fB@\fR (дивіться Спеціальні Параметри вище). ${#\fIназва\fR[\fIіндекс\fR]} розширюється до довжини ${\fIназва\fR[\fIіндекс\fR]}. Якщо індекс \fB*\fR або \fB@\fR, результатом розширення буде кількість елементів у масиві. Звертання до змінної масиву, не вказуючи індексу, рівносильне звертанню до змінної з індексом нуль.

Вбудована функція \fBunset\fR використовується для того щоб знищити масив. \fBunset\fR \fIназва\fR[\fIіндекс\fR] знищить лише елемент з даним \fIіндексом\fR. \fBunset\fR \fIназва\fR, де \fIназва\fR буде  масивом, або \fBunset\fR \fIназва\fR[\fIіндекс\fR], де \fIіндексом\fR буде \fB*\fR або \fB@\fR знищить цілий масив.

Вбудовані функції \fBdeclare\fR, \fBlocal\fR та \fBreadonly\fR можуть вживатися з \fB\-a\fR       опцією для того щоб вказати масив. Вбудована \fBread\fR також можна вживати з \fB\-a\fR опцією щоб привласнити список слів, прочитаний із стандартного вводу, масиву. Вбудовані \fBset\fR та \fBdeclare\fR виводять значення масиву таким чином що вони можуть бути використані у присвоєнні.

.SH "РОЗКРИТТЯ"
.PP

\fIРозкриття\fR (expansion) відбувається після того, як командний рядок розділиться на окремі слова. Існує сім видів розкриття: \fIрозкриття фігурних дужок\fR, \fIрозкриття тильди\fR, \fIрозкриття параметрів та змінних\fR, \fIзаміна команд\fR, \fIарифметичне розкриття\fR, \fIрозділення слів\fR та \fIрозкриття шляхів\fR.

Порядок розкриття наступний: розкриття фігурних дужок, розкриття тильди, розкриття параметрів та змінних, арифметичні розкриття, заміна команд (відбувається зліва направо), розділення слів та розкриття шляхів.

На системах, які це підтримують, існує додаткове розкриття: \fIзаміна процесу\fR.

Тільки розкриття фігурних дужок, розділення слів та розкриття шляхів можуть міняти кількість слів у виразі. Під час решти розкриттів кількість слів не міняється. Єдиний виняток становлять розкриття "\fB$@\fR" та "\fB${\fR\fIназва\fR\fB[@]}\fR", як вже було пояснено вище (дивіться ПАРАМЕТРИ).

.SS "Розкриття фігурних дужок"
.PP

\fIРозкриття фігурних дужок\fR є механізмом завдяки якому можна генерувати довільні рядки. Цей механізм дещо подібний до \fIрозкриття шляхів\fR, але назви файлів, які згенеруються, не обов'язково повинні існувати. Шаблони, для того щоб бути розширеними у фігурних дужках, повинні бути у формі, не обов'язкової, \fIпреамбули\fR
." або "префікс" 
, за якою слідує декілька, розділених комою, рядків, включених у, власне, фігурні дужки, за якими може бути, не обов'язкове, \fIзакінчення\fR
." pre{str1, str2}post 
. Преамбула стає префіксом усіх рядків, взятих у фігурні дужки, тоді як рядок\-закінчення додається в кінці кожного новоутвореного рядка. Розкриття відбуватиметься зліва направо.

Фігурні дужки можуть гніздитись
." pre{str1{str2},str3}post 
. Результат розкриття не сортується, а його порядок зберігається — зліва направо. Так, наприклад, a\fB{\fRd,c,b\fB}\fRf розкривається в `abf ace abe'.

Розкриття фігурних дужок відбувається перед усіма іншими розкриттями й будь\-які особливі знаки, важливі для інших розкриттів, будуть збережені у його результаті. Тобто — воно винятково текстуальне. \fBBash\fR не використовує жодних синтаксичних інтерпретацій стосовно контексту розкриття або тексту всередині фігурних дужок.

Правильно сформований вираз повинен включати незалапковану відкриваючу та закриваючу фігурнi дужки і, щонайменше, одну незалапковану кому. Якщо вираз сформувати неправильно, фігурні дужки розкриватись не будуть. Буквальні \fB{\fR, \fB}\fR або \fB,\fR можна екранувати зворотною похилою рискою, щоб уникнути інтерпретації їх як частини синтаксису виразу. Щоб запобігти конфліктів з розкриттям параметрів, рядок \fB${\fR не підляга розширенню фігурних дужок. 
." можна взяти в лапки якщо це перший знак перед фігурними дужками: "$"{a,b}c 

Конструкція із фігурними дужками як правило використовується для скорочення, коли префікси навіть довші, ніж в наступних прикладах:

.RS
.nf
      mkdir /usr/local/src/bash/{old,new,dist,bugs}

.fi
.RE
або

.RS
.nf
      chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}

.fi
.RE
Розкриття фігурних дужок додає деяку несумісність з історичними версіями \fBsh\fR. Оболонка \fBsh\fR не розглядає відкривну та закривну дужки як  спеціальні і зберігає їх у виводі. \fBBash\fR же вилучає дужки при вдалому розкритті. Так, введений у \fBsh\fR вираз \fIfile{1,2}\fR буде виведено буквально, тоді як у \fBbash\fR це видасть \fIfile1\fR та \fIfile2\fR. Якщо необхідна цілковита сумісність \fBbash\fR із \fBsh\fR, то розпочинайте \fBbash\fR із \fB+B\fR опцією, або скасуйте розширення фігурних дужок давши \fB+B\fR опцію \fBset\fR команді (дивіться ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ нижче).

.SS "Розкриття тильди"
.PP

Якщо слово починається з неекранованої 
." незалапкованої? 
 тильди (`\fB~\fR'), всі знаки до першого не неекранованого 
." незлапкованого? 
 слешу (або всі знаки, якщо немає неекранованого 
." незлапкованого? 
 слешу) розглядаються як \fIтильда\-префікс\fR. Якщо жоден з знаків із  тильди\-префіксу не є включеним у лапки, знаки що слідують за тильдою розглядатимуться як можливе \fIім'я користувача\fR. Якщо це ім'я користувача являється пустим рядком, тильда замінюється значенням параметру \fBHOME\fR. Якщо \fBHOME\fR скасовано (unset), домашній каталог користувача, що запустив оболонку, буде використано натомість. В інших випадках, тильда\-префікс замінюється назвою домашнього каталогу асоційованого з вказаним ім'ям користувача.

Якщо тильда\-префіком є `\fB~+\fR', значення змінної оболонки \fBPWD\fR замінює    тильду\-префікс. Якщо тильда\-префіксом є `\fB~\-\fR', значення змінної оболонки \fBOLDPWD\fR, якщо вона започаткована, замінить префікс. Якщо знаки, що слідують за тильдою, складаються із числа \fB\fIN\fB\fR із необов'язковими `\fB+\fR' або `\fB\-\fR' спереду, тильда\-префікс замінюється відповідною директорією зі стеку директорій, які можна побачити за допомогою \fBdirs\fR вбудованої команди із        тильдою\-префіксом як аргумент. Якщо перед номером що слідує за тильдою\-префіксом не стоїть `\fB+\fR' або `\fB\-\fR', то `\fB+\fR' використовується по        замовчуванню.

Якщо назва користувача не є дійсною, то розкриття тильди зазнає невдачі і слово залишиться без змін.

Кожне присвоєння значення змінній автоматично також перевіряється на наявність неекранованого 
." незалапкованої 
 тильда\-префікса що може слідувати \fB:\fR або \fB=\fR. Якщо знайдений,  тоді спочатку відбудеться розширення тильди. Таким чином, можна використовувати тильди при наданні значення \fBPATH\fR, \fBMAILPATH\fR та \fBCDPATH\fR.

.SS "Розкриття параметрів"
.PP

Знак `\fB$\fR' надає додаткову можливість розкриття параметрів, заміни команд і арифметичних розвернень. Назва параметра або знаки над якими відбудеться розвернення можуть бути включеними у фігурні дужки, які не являються обов'язковими але захищать змінні від довільних знаків що можуть слідувати за ними, щоб таким чином уникнути зливання назви змінних з сусідніми знаками.

Якщо використовуються фігурні дужки, то закриваючою `\fB}\fR' буде перша ж неекранована оберненим слешом або лапками, а не ті шо можуть зустрітися всередині арифметичних виразів, замін команд або розкриття параметрів.

.TP
.B ${\fIпараметр\fR}
.br
Дужки обов'язкові якщо \fIпараметр\fR є позиційним параметром із більше ніж однією цифрою або коли за \fIпараметр\fR одразу слідує знак який не є часткою його назви. 

Якщо першим знаком \fIпараметра\fR буде знак оклику, це призведе до одного рівня непрямого звернення до змінної.  
." ---- СЕРЙОЗНИЙ КОМЕНТАР -------
." indirection - if the value of a variable is the name of a second variable. It is  possible to retrieve the value of this second variable from the first one: a=b  and b=something. To from a to obtain /something/ is called indirect reference in sh it is done by eval a=\$$b; bash introduces a new syntax:  ${!a}
." sh:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    bash:
." a=b &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  a=b
." b="something" &nbsp;&nbsp;&nbsp;&nbsp; b="something"
." echo $a # b &nbsp;&nbsp;&nbsp;&nbsp; echo $a # b
." eval \$$a &nbsp;&nbsp;&nbsp;&nbsp; echo ${!a} # something
." echo $a # something &nbsp;&nbsp; ### No need in eval ### 

\fBBash\fR використовує значення змінної, сформованої з решти \fIпараметра\fR як назву змінної. Ця змінна потім розвернена і це значення використовується у решті заміни, замість, власне, значення \fIпараметра\fR. Це відомо як \fIнепряме розвернення\fR. Винятком до цього буде розвернення ${!\fIпрефікс\fR*}, яке описане нижче.

У кожному із прикладів нижче, \fIслово\fR піддається розширенню тильди, розширенню параметрів, заміні команди і арифметичному розширенню. Якщо не здійснюється розширення підрядка, \fBbash\fR перевіряє \fIпараметр\fR чи його не було скасований (unset) або він не є null, пропуск двокрапки призводить до перевірки тільки на \fIпараметр\fR що скасовано (unset).

.TP
.B ${\fIпараметр\fR :\- \fIслово\fR}
.br
\fBВикористати значення по замовчуванню\fR. Якщо  \fIпараметр\fR скасовано (unset) або нульовий, розширення \fIслова\fR стане на його місце, значення \fIпараметра\fR залишаючись незмінним. Якщо ні, то \fIпараметр\fR буде використано.

.TP
.B ${\fIпараметр\fR := \fIслово\fR}
.br
\fBПрисвоїти значення по замовчуванню\fR. Якщо \fIпараметр\fR скасовано (unset) або нуль, розширення \fIслова\fR присвоюється \fIпараметру\fR. Позиційним параметрам та спеціальним параметрам не можна присвоювати значення таким чином.

.TP
.B ${\fIпараметр\fR :? \fIслово\fR}
.br
''Спричинити помилку якщо нуль або скасовано'''. Якщо ''параметр'' є нуль або скасовано, розширення ''слова'' (або стандартне повідомлення оболонки про помилку якщо ''слово'' відсутне) буде виведено на екран як стандартна помилка, в випадку не інтерактивності, оболонка припине роботу. В іншому випадку, значення ''параметра'' заміняється.

.TP
.B ${\fIпараметр\fR :+ \fIслово\fR}
.br
\fBВикористати протилежне значення\fR. Якщо \fIпараметр\fR нульовий або скасовано (unset) нічого не замінюється, якщо ні \- розширення \fIслова\fR бере місце \fIпараметра\fR.

.TP
.B ${\fIпараметр\fR : \fIвідступ\fR}
.TP
.B ${\fIпараметр\fR : \fIвідступ\fR : \fIдовжина\fR}
.br
\fBРозширення підрядка\fR. Розширюється до \fIдовжини\fR знаків \fIпараметра\fR, починаючи зі знака вказаного у \fIвідступі\fR. Якщо \fIдовжину\fR пропушено, розширюється до частини рядка що міститься у  \fIпараметрі\fR, починаючи з \fIвідступу\fR. \fIДовжина\fR та \fIвідступ\fR являються арифметичними виразами (дивіться ОБЧИСЛЕННЯ АРИФМЕТИЧНИХ ВИРАЗІВ нижче). \fIДовжина\fR повиннa мати значення числа більшого або рівного нулю. Якщо \fIдовжина\fR виявиться числом меншим за нуль, то значення використовується для відліку від кінця рядка з \fIпараметра\fR. Якщо \fIпараметр\fR є \fB@\fR, результатом стане \fIдовжина\fR позиційних параметрів починаючи з \fIвідступу\fR. Якщо \fIпараметр\fR є масивом, індексованим \fB@\fR або \fB*\fR, результатом буде довжина\fI елементів масиву, починаючи з ${\fRпараметр\fI[\fRвідступ'']}. Індексація масивів починається з нуля за виключенням масивів позиційних параметрів, в цьому випадку індексація починається з 1.

.TP
.B ${\fB!\fR\fIпрефікс\fR\fB*\fR}
.br
Розширюється до назв змінних що починаються з \fIпефікса\fR, розділених пешим знаком \fBIFS\fR спеціальної змінної.
." ДЕЩО СПРОСТИВ НАСТУПНЕ 

.TP
.B ${\fB#\fR\fIпараметр\fR}
.br
Замінюється на кількість знаків у значенні \fIпараметра\fR. Якщо \fIпараметр\fR є \fB*\fR або \fB@\fR, то на кількість позиційних параметрів. Якщо \fIпараметр\fR є назвою масиву із індексом \fB*\fR або \fB@\fR, заміниться на кількість елементів у масиві.

.TP
.B ${\fIпараметр\fR\fB#\fR\fIслово\fR}
.TP
.B ${\fIпараметр\fR\fB##\fR\fIслово\fR}
.br
\fIСлово\fR є шаблоном. Якщо шаблон співпадає з початком значення \fIпараметра\fR, тоді найкоротша частина що співпала буде вилучена у ``\fB#\fR'' випадку, або найдовша частина що співпадає буде вилучена у ``\fB##\fR'' випадку. Ящо \fIпараметром\fR є \fB@\fR або \fB*\fR, вилучення за шаблоном відбуватиметься по відношенню до кожного позиційного параметра по черзі. Якщо \fIпараметр\fR це змінна масиву із індексом \fB@\fR або \fB*\fR, вилучення за шаблоном буде проведено по відношенню до кожного окремого елементу масиву по черзі.

.TP
.B ${\fIпараметр\fR\fB%\fR\fIслово\fR}
.TP
.B ${\fIпараметр\fR\fB%%\fR\fIслово\fR}
.br
\fIСлово\fR є шаблоном. Якщо шаблон співпадає з кінцем значення \fIпараметра\fR, тоді найкоротша частина що співпала буде вилучена  у ``\fB%\fR'' випадку, або найдовша частина що співпадає буде вилучена у ``\fB%%\fR'' випадку. Якщо \fIпараметр\fR є \fB@\fR або \fB*\fR, вилучення за шаблоном буде проводитись по відношенню до кожного позиційного параметра по черзі. Якщо \fIпараметр\fR це змінна масиву із індексом \fB@\fR або \fB*\fR, тоді вилучення за шаблоном відбудеться по відношенню до кожного окремого елементу масиву по черзі.

.TP
.B ${\fIпараметр\fR\fB/\fR\fIслово\fR\fB/\fR\fIрядок\fR}
.TP
.B ${\fIпараметр\fR\fB//\fR\fIслово\fR\fB/\fR\fIрядок\fR}
.br
\fIСлово\fR є шаблоном на зразок шаблонів для розширення шляхів. Частина значення \fIпараметра\fR що співпала з шаблоном заміниться на \fIрядок\fR. У першому випадку лише перше співпадання заміниться, у другому ж всі співпадання. Якщо \fIслово\fR починається з \fB#\fR, співпадання очікується лише на самому початку значення \fIпараметра\fR, і навпаки, \fB%\fR означає що співпадання очікується наприкінці. Якщо \fIрядок\fR не вказано, співпадання із \fIсловом\fR вилучаються і слеш (\fB/\fR) за \fIсловом\fR не обов'язковий. Якщо \fIпараметр\fR є \fB@\fR або \fB*\fR, заміна за шаблоном відбувається відносно кожного позиційного параметра по черзі. Якщо \fIпараметр\fR є змінною масиву з індеском \fB@\fR або \fB*\fR, заміна за шаблоном відбудеться відносно кожного елементу масиву по черзі.

.SS "Заміна Команди"
.PP

\fIЗаміна команди\fR дозволяє виводу команди замінити назву команди. Існують дві форми:

.RS
.nf
        $(\fIкоманда\fR)

.fi
.RE
або

.RS
.nf
        `\fIкоманда\fR`

.fi
.RE
\fBBash\fR виконує \fIкоманду\fR і замінює весь вираз на стандартний вивід команди, любі знаки нової лінії наприкінці вилучаються. Знаки нової лінії всередині виводу не вилучаються, але вони можуть бути усиненими під час        розділяння слів. Заміна команди \fB$(cat\fR \fIfile\fR\fB)\fR може бути написана як швидший еквівалент \fB$(<\fR \fIfile\fR\fB)\fR.

Коли старого стилю обернені лапки використано, обернений слеш зберігає своє буквальне значення, за винятком коли за ним слідує \fB$\fR, \fB`\fR або \fB\e\fR. Перші ж обернені лапки, які не є екрановані оберненим слешом, завершує вираз заміни команд. Коли використовується $(\fIкоманда\fR) форма, всі знаки що знаходяться всередині дужок є складовою команди, жоден не розглядається як спеціальний.

Заміни команд можуть бути розміщені гніздами. Щоб гніздити команди у класичній формі обернених лапок, екрануйте обернені лапки всередині виразу оберненим слешом.

Якщо заміна команд відбувається всередині подвійних лапок, розділення слів та розширення шляхів не відбуватиметься по відношенню до результатів заміни.   
."- need testing 

.SS "Арифметичне Розширення"
.PP

Арифметичне розширення дозволяє обчислення арифметичних виразів і заміни виразу результатом обчислення. Формат арифметичних розширень наступний:

.RS
.nf
        \fB$((\fR<i>вираз</i>\fB))\fR

.fi
.RE
\fIВираз\fR розглядається так як би він знаходився всередині подвійних лапок, але подвійні лапки всередині дужок не вважаються спеціальними. Всі лексеми всередині виразу піддаються розширенню параметрів, розширенню рядків, заміні команд і усуненню лапок. Арифметичні розширення можна гніздити.

Обчислення відбувається відповідно правил, перечислених у розділі ОБЧИСЛЕННЯ АРИФМЕТИЧНИХ ВИРАЗІВ. Якщо \fIвираз\fR не є дійсним, \fBbash\fR виведе повідомлення що вказує на невдачу і розширення не відбудеться.

.SS "Заміна Процесів"
.PP

\fIЗаміна процесів\fR може використовуватись на системах що підтримують поіменовані конвеєри (\fIFIFO\fR) або \fB/dev/fd\fR метод надання назв відкритим файлам. Заміни процесів мають форму \fB<(\fR\fIсписок\fR\fB)\fR або \fB>(\fR\fIсписок\fR\fB)\fR. Процеси у \fIсписку\fR запускаються з вводом або виводом, прикріпленими до \fIFIFO\fR або якогось файлу у \fB/dev/fd\fR. Назва цього файлу що утворився в результаті розширення заміни процесів, подається як агрумент поточної команди. Якщо використовується \fB>(\fR\fIсписок\fR\fB)\fR форма, запис до цього файлу забеспечує ввід для \fIсписку\fR процесів. Якщо використовується \fB<(\fR\fIсписок\fR\fB)\fR форма, файл, наданий як аргумент повинен читатися для того щоб отримати вивід \fIсписку\fR.

Коли це можливо, заміна процесів відбувається одночасно з розширенням параметрів і змінних, заміною команд і арифметичним розширенням.

.SH "ПЕРЕНАПРАВЛЕННЯ"
.PP

.SH "ПСЕВДОНІМИ"
.PP

.SH "ФУНКЦІЇ"
.PP

.SH "ОБЧИСЛЕННЯ АРИФМЕТИЧНИХ ВИРАЗІВ"
.PP

.SH "УМОВНІ ВИРАЗИ"
.PP

.SH "РОЗШИРЕННЯ ПРИ ВИКОНАННІ ПРОСТИХ КОМАНД"
.PP

.SH "ВИКОНАННЯ КОМАНД"
.PP

.SH "СЕРЕДОВИЩЕ ВИКОНАННЯ КОМАНД"
.PP

.SH "СЕРЕДОВИЩЕ"
.PP

.SH "СТАН ВИХОДУ"
.PP

.SH "СИГНАЛИ"
.PP

.SH "КОНТРОЛЬ ВИКОНАННЯ РОБІТ"
.PP

.SH "ВИГЛЯД ПІДКАЗКИ (PROMPT)"
.PP

.SH "READLINE"
.PP

.SH "АРХІВ"
.PP

.SH "РОЗШИРЕННЯ АРХІВУ"
.PP

.SH "ВБУДОВАНІ КОМАНДИ ОБОЛОНКИ"
.PP

.SH "ОБМЕЖЕНА ОБОЛОНКА"
.PP

.SH "ДИВІТЬСЯ ТАКОЖ"
.PP

Bash Reference Manual, Brian Fox and Chet Ramey
.br

The Gnu Readline Library, Brian Fox and Chet Ramey
.br

The Gnu History Library, Brian Fox and Chet Ramey
.br

Portable Operating System Interface (POSIX) Part 2: Shell and Utilities, IEEE

\fBsh(1)\fR, \fBksh(1)\fR, \fBcsh(1)\fR, \fBemacs(1)\fR, \fBvi(1)\fR,  \fBreadline(3)\fR.

.SH "ФАЙЛИ"
.PP

.TP
.B /bin/bash
.br
Сама програми оболонки Bash
.TP
.B /etc/profile
.br
Загальносистемний ініціалізаційний файл, що виконується при вході у систему.
.TP
.B ~/.bash_profile
.br
Персональний ініціалізаційний файл, що виконується при вході у систему.
.TP
.B ~/.bashrc
.br
Персональний ініціалізаційний файл, що виконується після входу в систему.
.TP
.B ~/.bash_logout
.br
Персональний файл, що виконується при виході з системи, для очистки екрану, тощо.
.TP
.B ~/.inputrc
.br
Персональний ініціалізаційний файл для readline.

.SH "АВТОРИ"
.PP

Брайан Фокс (Brian Fox), Free Software Foundation<br/>
bfox@gnu.org

Чет Рамі (Chet Ramey), Case Western Reserve University<br/>chet@ins.CWRU.Edu

.RS
.nf
 

.fi
.RE

.SH "ПОВІДОМЛЕННЯ ПРО ВАДИ"
.PP

Якщо ви знайшли ваду в bash, ви повинні сказати про неї. Але спочатку, переконайтесь, що це дійсно вада та те, що вона присутня у останній версії bash, яка у вас є.

Як тільки ви встановили, що ця вада дійсно існує, використайте команду bashbug для подання повідомлення про вади. Якщо у вас є виправлення цієї помилки, відправте його також! Ви можете відправляти пропозиції та "філософські" повідомлення про вади за адресою bug\-bash@gnu.org чи поміщати до групи новин Usenet gnu.bash.org

Всі повідомлення про вади повинні включати:

.br
  * Номер версії bash
.br
  * Дані про апаратне забеспечення та операційну систему
.br
  * Компілятор, за допомогою якого було скомпільовано bash
.br
  * Опис поведінки вади
.br
  * Короткий скрипт чи "рецепт", що дозволяє визначити помилку

bashbug створює шаблон для повідомлення про вади, автоматично заповнюючи перші три пункти. 

Коментарі та відгуки, що стосуються цієї сторінки підручника повинні направлятися до chet@ins.CWRU.Edu (оригіналу цього перекладу).

.SH "ВАДИ"
.PP

Bash надто великий та надто повільний.

Є деякі тонкі відмінності між bash та традиційною версією sh, головним чином через специфікацію POSIX.

Використання псевдонімів є заплутаним в деяких випадках.

Вбудовані команди і функції не можна зупиняти/перезапускати.

Складені команди і послідовності команд у формі `a ; b ; c' не обробляються належним чином коли робиться спроба припинення процесу. Коли процес зупиняється, оболонка негайно виконує наступну команду в послідовності. Достатньо помістити послідовність команд у скобки щоб примусити запуск підоболонки, яку можна зупиняти як блок.

Команди всередині підстановки команд $(...) не аналізуються доки не відбудеться спроба підстановки. Це затримує звіт про помилку на деякий час після виконання підстановки команд.

Змінні\-масиви не можна (поки що) експортувати.

повернутися до сторінок підручника

