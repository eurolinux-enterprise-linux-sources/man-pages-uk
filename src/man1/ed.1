." © 2005-2007 DLOU, GNU FDL
." URL: <http://docs.linux.org.ua/index.php/Man_Contents>
." Supported by <docs@linux.org.ua>
."
." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.2
." or any later version published by the Free Software Foundation;
." with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
." 
." A copy of the license is included  as a file called COPYING in the
." main directory of the man-pages-* source package.
."
." This manpage has been automatically generated by wiki2man.py
." This tool can be found at: <http://wiki2man.sourceforge.net>
." Please send any bug reports, improvements, comments, patches, etc. to
." E-mail: <wiki2man-develop@lists.sourceforge.net>.

.TH "ed" "1" "2007-10-27-16:31" "© 2005-2007 DLOU, GNU FDL" "2007-10-27-16:31"

.SH " НАЗВА "
.PP
ed, red \- текстовий редактор 

.SH " СТИСЛИЙ ОГЛЯД "
.PP
ed [\-] [\-Gs] [\-p \fIланцюжок\fR] [\fIфайл\fR] 

.br

red [\-] [\-Gs] [\-p \fIланцюжок\fR] [\fIфайл\fR] 

.SH " ОПИС "
.PP
\fBed\fR є рядково\-зорієнтованим текстовим редактором. Він використовується для створення, відображення, зміни і маніпуляції текстових файлів. \fBred\fR є обмеженим \fBed\fR: він може лише редагувати файли у поточному каталозі але не виконувати команд оболонки. 

Якщо викликано з аргументом \fIфайл\fR, тоді \fIфайл\fR буде зчитано у буфер редактора. Зміни здійснюються по відношенню до цього буферу, а не самого \fIфайлу\fR. Після завершення сеансу, будь\-які зміни, не збережені явно командою `w', буде втрачено. 

Редагування відбувається у двох відмінних режимах: \fIкомандному\fR і \fIрежимі вводу \fR. Як тільки \fBed\fR запущено, він опиняється у командному стані. У цьому режимі, команди зчитуються зі стандартного вводу і виконуються для того, щоб маніпулювати вміст буферу редактора. Типова команда може виглядати так: 
.br

.br
 

.RS
.nf

    
,s/old/new/g

.fi
.RE
 
.br

.br
 що замінить всі випадки ланцюжка \fIold\fR на \fInew\fR. 

Коли надано команди вводу, такі як `a' (англ. append \- додати), `i' (англ. insert \- ввід) або `c' (англ. change \- змінити), \fBed\fR увійде у режим вводу. Це основний спосіб додавання нового тексту до файлу. У цьому режимі, жодна команда не є доступною, натомість стандартний ввід записується безпосередньо до буфера редактора. Рядки складаються з тексту аж до знаку нового рядка включно. Режим вводу переривається після того, як внести поодиноку крапку на одному рядку. 

Усі команди \fBed\fR оперують по відношенню до цілих рядків або діапазонів рядків; тобто, команда `d' (англ. delete \- стерти) вилучає рядки; команда `m' (англ. move \- перемістити) переміщує рядки і.т.д. Є можливість змінити лише частину рядка завдяки заміні, як у прикладі вище. Тим не менш, навіть тоді команда `s' застосовуватиметься по відношенню до цілого рядка. 

Загалом, команди \fBed\fR складаються з жодної або декількох адрес рядків, після яких слідує одна літера команди із можливими додатковими параметрами. Тобто команди мають наступну структуру: 
.br

.br
 

.RS
.nf
    
    [\fIадреса\fR [,\fIадреса\fR]]\fIкоманда\fR[\fIпараметри\fR]

.fi
.RE
Адреса(и) вказують на ті рядки або діапазон рядків, над якими відбудеться дія команди. Якщо надано менше адрес, ніж команда вимагає, тоді підставляються адреси за замовчуванням. 

.SH " ОПЦІЇ "
.PP

.TP
.B \-G
 Примушує до оберненої сумісності. Впливає на такі команди як `G', `V', `f', `l', `m', `t' і `!!'. 

.TP
.B \-s
 Пригнічує діагностичні повідомлення. Рекомендовано вживати якщо стандартний ввід для \fBed\fR надходить зі скрипта. 

.TP
.B \-p \fIланцюжок\fR
 Встановлює вигляд підказки. Може бути вимкнена і ввімкнена назад командою `P'. 

.TP
.B \fIфайл\fR
 Вказує назву файлу, який необхідно прочитати (у буфер). Якщо \fIфайлу\fR передує знак оклику (!), тоді ця назва інтерпретується як оболонкова команда. У цьому випадку, що буде прочитано, так це стандартний вивід команди, виконаної через \fBsh\fR(1). Щоб прочитати файл, чиє ім'я починається зі знаку оклику, екрануйте цей знак зворотнім слешом (\e). 

.SH " РЯДКОВА АДРЕСАЦІЯ "
.PP
Адреса являє собою номер рядка у буфері. \fBed\fR включає \fIпоточну адресу\fR, яка надається командам автоматично як адреса за замовчуванням у випадку, коли жодної не було вказано. Коли тільки\-но прочитано файл, поточна адреса встановлюється до останнього рядка файлу. Загалом, поточна адреса встановлюється до останнього, зміненого якоюсь командою, рядка. 

Рядкова адреса побудована з однієї зі складових, перелічених нижче, із можливим числовим зсувом після. Зсув може включати будь\-яку комбінацію чисел, операторів (таких як +, \- і ^) і пробілів. Адреси зчитуються зліва\-направо і їхнє значення обчислюється по відношенню до поточної адреси. 

Єдиним виключенням до правила, що адреси представляють порядковий номер рядків, є адреса з номером 0 (нуль). Це означає "перед першим рядком" і допустимо там, де має сенс. 

Діапазон складається з двох адрес, розділених комою або крапкою з комою. Значення першої адреси в діапазоні не може перевищувати значення другої. Якщо надало лишень одну адресу у діапазоні, то друга адреса набуває того самого значення, що й перша. Якщо вказано \fIn\fR\-нну кількість адрес, де \fIn\fR > 2, тоді діапазон обчислюється з останніх двох адрес. Якщо очікується лише одна адреса, буде використано останню з \fIn\fR\-нних адрес. 

Кожна адреса з розділеною комою діапазону інтерпретується відносно поточної адреси. У випадку розділеному комою з крапкою діапазоні, поточна адреса встановлюється до першої зі вказаних у діапазоні і друга адреса інтерпретується по відношенню до першої. 

Розпізнаються наступні символи для позначення адрес: 

.TP
.B .
 Поточний рядок (адреса) в буфері. 

.TP
.B $
 Останній рядок у буфері. 

.TP
.B \fIn\fR
 \fIn\fR\-нний рядок в буфері, де \fIn\fR є числом у проміжку [0,$]. 

.TP
.B 

\-: 

.TP
.B ^
 Попередній рядок. Це рівнозначно \-1 і можна повторювати для накопичувального ефекту. 

.TP
.B 

\-\fIn\fR: 

.TP
.B ^\fIn\fR
 \fIn\fR\-нний попередній рядок, де \fIn\fR повинно бути додатковим числом. 

.TP
.B +
 Наступний рядок. Це рівнозначно +1 і можна повторювати для накопичувального ефекту. 

.TP
.B 

+\fIn\fR: 

.TP
.B пробіл\fIn\fR
 \fIn\fR\-нний наступний рядок, де \fIn\fR повинно бути додатковим числом. \fIПробіл\fR із послідуючою цифрою \fIn\fR розглядається як +\fIn\fR. 

.TP
.B 

,: 

.TP
.B %
 Перший до останнього рядка в буфері. Це рівнозначно діапазону адрес 1,$. 

.TP
.B ;
 Поточний до останнього рядка в буфері. Це рівнозначно діапазону адрес .,$. 

.TP
.B /\fIre\fR/
 Наступний рядок, що містить регулярний вираз \fIre\fR. Пошук завертається до початку буферу і продовжується до поточного рядка, якщо необхідно. // повторює останній пошук. 

.TP
.B ?\fIre\fR?
 Попередній рядок, що містить регулярний вираз \fIre\fR. Пошук завертається до кінця буферу і продовжується до поточного рядка, якщо необхідно. ?? повторює останній пошук. 

.TP
.B '\fIlc\fR
 Рядок, попередньо помічений командою `k' (команда мічення), де \fIlc\fR являється літерою нижнього регістру. 

.SH " РЕГУЛЯРНІ ВИРАЗИ "
.PP
Регулярні вирази являються зразками, використовуваними для вибору тексту. Так наприклад, команда \fBed\fR 
.br

.br
 

.RS
.nf
    
   g/\fIланцюжок\fR/

.fi
.RE
виведе всі рядки, що містять \fIланцюжок\fR. Регулярні вирази також використовуються командою `s' для вибору старого тексту, який буде замінено новим. 

Окрім вказування ланцюжкових констант, регулярні вирази можуть представляти також класи знаків. Регулярний вираз може співпасти з декількома ланцюжками на тому самому рядку. В такому випадку, вибрано буде найлівіше найдовше співпадання. 

Для побудови регулярних виразів використовуються наступні символи: 

.TP
.B c
 Будь\-який знак \fIc\fR, не перелічений нижче, включаючи `{', `}', `(', `)', `<' і `>', що співпаде самий з собою. 

.TP
.B \e\fIc\fR
 Екранований зворотнім слешом знак \fIc\fR окрім таких знаків як `{', `}',  `(', `)', `<', `>', `b', 'B', `w', `W', `+' і `?', що співпаде самий з собою. Співпадає із будь\-яким одним знаком. 

.TP
.B [\fIклас_знаків\fR]
 Співпаде з будь\-яким одним знаком із класу знаків. Щоб включити знак `]' до класу, цей знак повинен бути розміщеним першим. Діапазон знаків можна вказати через дефіс, наприклад `a\-z' вказує на всі літери нижнього регістру. Наступні буквенні вирази також можна вжити для вказівки наборів знаків: 
.br

.br
 

.RS
.nf

    [:alnum:]  [:cntrl:]  [:lower:]  [:space:]
    [:alpha:]  [:digit:]  [:print:]  [:upper:]
    [:blank:]  [:graph:]  [:punct:]  [:xdigit:]

.fi
.RE
 
.br

.br
 Якщо риска `\-' з'явиться як перший або останній знак \fIкласу знаків\fR, вона репрезентуватиме саму себе. Всі інші знаки \fIкласу знаків\fR співпадають із самими собою. 

Зразки \fIкласу знаків\fR, що мають форму 
.br

.br
 

.RS
.nf

    
[.ел\-кол.] або [=ел\-кол=]

.fi
.RE
 
.br

.br
 де .І ел\-кол являється елементом коляції (послідовності сортування знаків), розглядаються відповідно від поточної локалі (не підтримується на даний момент. Дивіться сторінку підручника \fBlocale\fR(5)). Загляніть до \fBregex\fR(3) для додаткової інформації про класи знаків. 

.TP
.B [^\fIклас_знаків\fR]
 Співпаде з будь\-яким знаком (за винятком знаку нового рядка), що не входить у \fIклас знаків\fR. 

.TP
.B ^
 Якщо символ `^' стоїть першим знаком регулярного виразу, тоді він позначає початок рядка і зв'язує даний регулярний вираз з початком рядка. У протилежному випадку він співпадає самий з собою. 

.TP
.B $
 Якщо символ `$' стоїть першим знаком регулярного виразу, тоді він позначає кінець рядка і зв'язує даний регулярний вираз з кінцем рядка. У протилежному випадку він співпадає з самим собою. 

.TP
.B \e(\fIre\fR\e)
 Означує підвираз \fIre\fR (можливо відсутній). Підвирази можуть гніздуватися. Послідовне зворотнє звертання, що має форму `\e\fIn\fR', де \fIn\fR являється числом в інтервалі [1,9] розкривається до тексту, що співпав з \fIn\fR\-нним підвиразом. Наприклад, регулярний вираз `\e(a.c\e)\e1' співпаде з ланцюжком `abcabc', але не з `abcadc'. Підвирази впорядковані відносно їхнього лівого розмежувача. 

.TP
.B *
 Співпадає з нульовою або більше кількістю регулярних виразів з одного знаку або підвиразів, розміщених попереду `*'. Якщо `*', це перший знак регулярного виразу або підвиразу, тоді він співпадає сам з собою. Оператор `*' іноді призводить до несподіваних результатів. Так, наприклад, регулярний вираз `b*' може співпасти з початком ланцюжка `abbb', а не з `bbb', since a null match is the only left\-most match. 

.TP
.B 

\e{\fIn\fR,\fIm\fR\e}: 

.TP
.B \e{\fIn\fR,\e}
 

.TP
.B \e{\fIn\fR\e}
 Співпадає з передуючим регулярним виразом з одного знаку або з підвиразом щонайменше \fIn\fR разів, але щонайбільше \fIm\fR раз. Якщо \fIm\fR пропущено, тоді співпадає щонайменше \fIn\fR разів. Якщо кому також пропущено, тоді співпадання повинно відбутися точно \fIn\fR раз. У випадку, якщо будь\-яка з цих форм стоїть першою, без попереднього регулярного виразу з одного знаку або з підвиразу, тоді вона розглядатиметься буквально (тобто, регулярний вираз `\e{2\e}' співпадатиме з ланцюжком `{2}' і.т.п.). 

.TP
.B 

\e<: 

.TP
.B \e>
 Прикріплює регулярний вираз з одного знаку або з підвираз, які стоять після \e< або перед \e> до, відповідно, початку або кінця "слова" (в ASCII, це суцільний ланцюжок, що складається з літер і цифр і жорсткого пробілу (_)). 

Наступним операторам, що являються розширенням, передує зворотній слеш (\e), щоб відрізнити їх від традиційного синтаксису \fBed\fR. 

.TP
.B 

\e`: 

.TP
.B \e'
 Беззастережно співпадає з початком (\e`) або кінцем (\e') рядка. 

.TP
.B \e?
 Необов'язкове співпадання з попереднім регулярним виразом з одного знаку або підвиразом. Так, наприклад, регулярний вираз `a[bd]\e?c' співпаде з ланцюжками `abc', `adc' і `ac'. Якщо \e? з'явиться на початку регулярного виразу або підвиразу, тоді воно співпадає з буквальним `?'. 

.TP
.B \e+
 Співпадає з передуючим регулярним виразом з одного знаку або з підвиразом принаймні один раз або більше. Тож, регулярний вираз `a+' є скороченням для `aa*'.  Якщо \e+ з'явиться на початку регулярного виразу або підвиразу, тоді воно співпадає з буквальним `+'. 

.TP
.B \eb
 Співпадає з початком або кінцем (нульовий ланцюжок) слова. Таким чином, регулярний вираз `\ebhello\eb' еквівалентний `\e<hello\e>'. Проте, `\eb\eb' є чинним регулярним виразом, тоді як `\e<\e>' \- ні. 

.TP
.B \eB
 Співпадає з серединою слова (нульовим ланцюжком). \e" не розумію \eB. FIXME 

.TP
.B \ew
 Співпадає з будь\-яким знаком всередині слова. 

.TP
.B \eW
 Співпадає з будь\-яким знаком, що не знаходиться всередині слова. 

.SH " КОМАНДИ "
.PP
Всі команди \fBed\fR складаються з одного знаку, хоча деякі з них можуть вимагати додаткових параметрів. Якщо параметр команди простягнувся через декілька рядків, тоді кожний рядок, за винятком останнього, необхідно завершити зворотнім слешом (\e). 

Як правило, не більше однієї команди дозволено на одному рядку. Тим не менш, до більшість команд можна додати суфікс виводу `p' (print), переліку `l' (list) і нумерації `n' (enumerate) для виводу останнього рядка, над яким відбулася дія команди. 

Переривання (типово ^C) має як ефект припинення поточної команди і повернення редактора до командного стану. 

\fBed\fR розпізнає наступні команди. Команди показані з адресою за замовчуванням або діапазон адрес вказано штучно (в дужках). 

.TP
.B (.)a
 Додає (англ. append) текст до буферу поточного рядка, який може знаходитись також за адресою 0 (нуль). Текст добавляється у режимі вводу. Поточна адреса встановлюється до останнього введеного рядка. 

.TP
.B (.,.)c
 Змінює рядки у буфері. Вказані вами рядки вилучаються з буферу і добавляється ваш текст натомість. Текст добавляється у режимі вводу. Поточна адреса встановлюється до останнього введеного рядка. 

.TP
.B (.,.)d
 Вилучає вказані вами рядки з буферу. Якщо існує рядок після видалених, поточна адреса встановиться до цього рядка. У протилежному випадку, поточна адреса встановлюється до рядка попереду видаленого діапазону. 

.TP
.B e \fIфайл\fR
 Редагує \fIфайл\fR і встановлює назву файлу за замовчуванням. \e" ??? FIXME Якщо \fIфайл\fR не вказано, тоді буде використано назву файлу за замовчуванням. Будь\-які рядки, присутні у буфері, видаляються до того як прочитати новий файл. Поточна адреса встановлюється до останнього прочитаного рядка. 

.TP
.B e !\fIкоманда\fR
 Редагує стандартний вивід `e !\fIкоманди\fR' (дивіться e !\fIкоманда\fR нижче). Назва файлу за замовчуванням залишається незмінною. \e" ??? FIXME Будь\-які рядки, присутні у буфері, видаляються перед тим як прочитати вивід \fIкоманди\fR. Поточна адреса встановлюється до останнього прочитаного рядка. 

.TP
.B E \fIфайл\fR
 Беззастережно редагує \fIфайл\fR. Ця команда тотожна команді `e', за винятком того, що незаписані зміни відкидаються без попередження. Поточна адреса встановлюється до останнього прочитаного рядка. 

.TP
.B f \fIназва_файлу\fR
 Встановлює назву файлу за замовчуванням до \fIназви_файлу\fR. Якщо \fIназву_файлу\fR не вказано, тоді виводить неекрановану назву файлу за замовчуванням. 

.TP
.B (1,$)\fIg\fR/\fIre\fR/\fIсписок_команд\fR
 Застосовує \fIсписок_команд\fR до кожного рядка, що співпадає з регулярним виразом \fIre\fR. Поточна адреса встановлюється до рядка, що співпав з регулярним виразом до виконання \fIсписку_команд\fR. Після виконання команди `g', поточна адреса встановлюється до останнього рядка, над яким \fIсписок_команд\fR мав вплив. 

Кожна команда у \fIсписку_команд\fR повинна бути на окремому рядку і кожний рядок, за винятком останнього, повинен закінчуватись зворотнім слешом (\e). Дозволяється додавати будь\-які команди за винятком `g', `G', `v' та `V'. Самотній знак нового рядка серед \fIсписку_команд\fR рівнозначний команді `p'. 

.TP
.B (1,$)G/\fIre\fR/
 Інтерактивне редагування рядків, що співпадають з регулярним виразом \fIre\fR. Кожний співпадаючий рядок виводиться на екран, поточна адреса встановлюється до цього рядка і від користувача вимагається ввести \fIсписок_команд\fR. Після виконання команди `G', поточна адреса встановлюється до останнього рядка, над яким \fIсписок_команд\fR мав вплив. 

Формат \fIсписку_команд\fR той самий, що й при команді `g'. Самотній знак нового рядка діє ніби нульовий список команд. Поодинокий `&' (знак кон'юнкції) повторює останній ненульовий список команд. 

.TP
.B H
 Викликає вивід пояснення помилок. Стандартно, пояснення не виводяться. Рекомендовано, щоб скрипти починалися з цієї команди для додаткової помочі у налагодженні. 

.TP
.B h
 Виводить пояснення останньої помилки. 

.TP
.B (.)i
 Вставляє текст у буфер перед поточним рядком. Текст добавляється у режимі вводу. Поточна адреса встановлюється до останнього введеного рядка. 

.TP
.B (.,.+1)j
 Об'єднує рядки. Вказані рядки видаляються з буферу і замінюються їхнім об'єднанням. Поточна адреса встановлюється до рядка, отриманого в результаті. 

.TP
.B (.)k\fIlc\fR
 Позначає рядок літерою нижнього регістру \fIlc\fR. Пізніше, цей рядок може бути адресовано з інших команд як '\fIlc\fR (тобто одинична лапка за якою слідує літера \fIlc\fR). Мітка залишається чинною до тих пір, доки рядок видалено або змінено якимось чином. 

.TP
.B (.,.)l
 Недвозначно виводить всі вказані рядки. Якщо команду викликано з терміналу, \fBed\fR призупиняється після виводу кожної сторінки доти, доки ви не введете знак нового рядка. Поточна адреса встановлюється до останнього виведеного рядка. 

.TP
.B (.,.)m(.)
 Переміщує рядки у буфері. Вказані рядки переміщуються до місця, вказаного з правої сторони, яке може бути також адресою під номером 0 (нуль). Поточна адреса встановлюється до останнього переміщеного рядка. 

.TP
.B (.,.)n
 Виводить вказані рядки разом із порядковим числом (нумерацією). Поточна адреса встановлюється до останнього виведеного рядка. 

.TP
.B (.,.)p
 Виводить вказані рядки. Якщо команду викликано з терміналу, \fBed\fR призупиняється після виводу кожної сторінки доти, доки ви не введете знак нового рядка. Поточна адреса встановлюється до останнього виведеного рядка. 

.TP
.B P
 Вмикає і вимикає запрошення. За винятком коли запрошення було вказане опцією командного рядка \fI\-p ланцюжок\fR, воно стандартно вимкнене. 

.TP
.B q
 Завершує сеанс \fBed\fR. 

.TP
.B Q
 Завершує сеанс \fBed\fR беззастережно. Тотожно команді `q', за винятком того, що незбережені зміни відкидаються без попередження. 

.TP
.B ($)r \fIфайл\fR
 Зчитує \fIфайл\fR (вносячи його у буфер) після вказаної адреси рядка. Якщо \fIфайл\fR не вказано, тоді використовується назва файлу за замовчуванням. Якщо до виконання команди не існувало назви файлу за замовчуванням, воно встановиться до \fIфайлу\fR. У протилежному випадку, назва файлу за замовчуванням залишиться незмінною. Поточна адреса встановиться до останнього прочитаного рядка. 

.TP
.B ($)r !\fIкоманда\fR
 Зчитує (вносячи у буфер) стандартний вивід `\fI!команди\fR' (дивіться \fI!команда\fR нижче) після вказаної адреси рядка. Назва файлу за замовчуванням залишається незмінною. Поточна адреса встановлюється до останнього прочитаного рядка. 

.TP
.B 

(.,.)s/\fIre\fR/\fIзаміна\fR/: 

.TP
.B (.,.)s/\fIre\fR/\fIзаміна\fR/g
 

.TP
.B (.,.)s/\fIre\fR/\fIзаміна\fR/n
 Замінює текст рядків, що співпадають з регулярним виразом \fIre\fR. Стандартно, лише перше співпадання в рядкові піддається заміні. Якщо надано суфікс `g' (англ. global), тоді \- всі. Суфікс `\fIn\fR', де \fIn\fR, це додаткове ціле число, спричинює до заміни лише \fIn\fR\-нного співпадання. Якщо жодної заміни на вказаних рядках не відбулося, це вважатиметься за помилку. Поточна адреса встановлюється до останнього зміненого рядка. 
.br

.br
 \fIre\fR і ланцюжок \fIзаміни\fR можуть бути розмежовані будь\-якими знаками окрім пробілу і знаку нового рядка (дивіться команду `s' нижче). Якщо один або два з останніх розділювачів опущено, тоді буде виведено останній рядок, над яким відбулася дія, так ніби було додано суфікс `p'. 
.br

.br
 Неекранований `&' у \fIзаміні\fR буде замінено на поточний текст що співпав. Послідовність знаків `\e\fIm\fR', де \fIm\fR є числом в діапазоні [1,9] замінюється на \fIm\fR\-ннє зворотнє посилання на текст, що співпав. Якщо \fIзаміна\fR складається з поодинокого `%', тоді буде використано \fIзаміну\fR з останньої операції заміщення. Знаки нового рядка можна включати у текст \fIзаміни\fR якщо їх екрановано зворотнім слешом (\e). 

.TP
.B (.,.)s
 Повторює останню операцію заміщення. Ця форма команди `s' сприймає лічильний суфікс `n' або будь\-яку комбінацію знаків `n', `g' і `p'. Якщо вказано лічильний суфікс `\fIn\fR', тоді тільки над \fIn\fR\-нним співпаданням відбудеться заміна. Суфікс `r' спричиняє до того, що використовуватиметься регулярний вираз останнього пошуку замість того, що використовувався під час останньої заміни. Суфікс `p' вмикає вивід для останньої операції заміни. Поточна адреса встановлюється до останнього рядка, над яким відбулася дія. 

.TP
.B (.,.)t(.)
 Копіює (тобто переносить) адресовані рядки до вказаної з правої сторони адреси, яка може бути також адресою 0 (нуль). Поточна адреса встановлюється до останнього копійованого рядка. 

.TP
.B u
 Скасовує останню команду і відновлює поточну адресу до попередньої. Глобальні команди `g', `G', `v' і `V' розглядаються як одиничні команди у цьому випадку. Команда `u' інвертує саму себе. 

.TP
.B (1,$)v/\fIre\fR/\fIсписок_команд\fR
 Застосовує \fIсписок_команд\fR до кожного рядка, що співпадає з регулярним виразом \fIre\fR. Схоже до команди `g'. 

.TP
.B (1,$)V/\fIre\fR/
 Інтерактивне редагування рядків, що не співпадають з регулярним виразом \fIre\fR. Схоже до команди `G'. 

.TP
.B (1,$)w \fIфайл\fR
 Записує вказані рядки до \fIфайлу\fR. Весь попередній вміст \fIфайлу\fR буде втрачено без попередження. Якщо не існувало назви за замовчуванням файлу, тоді вона встановиться до вказаного \fIфайлу\fR, в протилежному випадку, вона залишиться незмінною. Якщо назва не вказується взагалі, використовується назва файлу за замовчуванням. Поточна адреса залишається незмінною. 

.TP
.B (1,$)wq \fIфайл\fR
 Записує вказані рядки до \fIфайлу\fR, після чого виконує команду `q'. 

.TP
.B (1,$)w ! \fIкоманда\fR
 Пише стандартний вивід у стандартний ввід `!\fIкоманди\fR' (дивіться !\fIкоманда\fR нижче). Назва файлу за замовчуванням і поточна адреса залишаються незмінними. 

.TP
.B (.)x
 Копіює (операція put) вміст вирізного буферу одразу після вказаного рядка. Поточна адреса встановлюється до останнього копійованого рядка. 

.TP
.B (.,.)y
 Копіює (операція yank) вказані рядки до вирізного буферу. Вирізний буфер можна перезаписати послідуючими командами `y', `s', `j', `d' або `c'. Поточна адреса залишається незмінною. 

.TP
.B (.+1)z\fIn\fR
 Прокручує \fIn\fR рядків за раз, починаючи зі вказаного рядка. Якщо \fIn\fR не вказано, тоді буде використано поточний розмір екрану. Поточна адреса встановлюється до останнього виведеного рядка. 

.TP
.B !\fIкоманда\fR
 Виконує \fIкоманду\fR, за допомогою \fBsh\fR(1). Якщо першим знаком \fIкоманди\fR стоїть `!', тоді це заміниться на текст попередньої `!\fIкоманди\fR'. \fBed\fR не обробляє \fIкоманду\fR на предмет екранації зворотнім слешом (\e). Проте, неекранований `%' замінюється на назву файлу за замовчуванням. Після закінчення виконання оболонкою, виводиться `!' на стандартний вивід. Поточна адреса залишається незмінною. 

.TP
.B (.,.)#
 Розпочинає коментар. Решту рядка аж до знака нового рядка ігноруватиметься. Якщо додатково надано адресу рядка з наступною крапкою з комою, тоді поточна адреса встановиться до неї. В протилежному випадку поточна адреса залишається незмінною. 

.TP
.B ($)=
 Виводить порядковий номер (поточного) рядка. 

.TP
.B (.+1)новий рядок
 Виводить вказаний рядок і встановлює поточну адресу до нього. 

.SH " ФАЙЛИ "
.PP

.TP
.B /tmp/ed.*
 Файл буферу. 

.TP
.B ed.hup
 Файл, у якому \fBed\fR намагатиметься зберегти буфер у випадку, якщо термінал зависне. 

.SH " ДИВІТЬСЯ ТАКОЖ "
.PP
\fBvi\fR(1), \fBsed\fR(1), \fBregex\fR(3), \fBsh\fR(1). 

B. W. Kernighan and P. J. Plauger, Software Tools in Pascal, Addison\-Wesley, 1981.

.SH " ОБМЕЖЕННЯ "
.PP
\fBed\fR обробляє аргументи \fIфайл\fR щодо екранації зворотнім слешом, тобто у назві файлу будь\-який знак з попереднім зворотнім слешом (\e) інтерпретується буквально. 

Якщо текстовий (не бінарний) файл не закінчується знаком нового рядка, \fBed\fR додасть його після зчитування/запису до файлу. У випадку ж бінарних файлів, \fBed\fR цього не здійснює. 

.SH " ДІАГНОСТИКА "
.PP
При виникненні помилки, якщо ввід \fBed\fR надходить зі звичайного файлу або тут\-документу, редактор завершить роботу, у протилежному випадку, він виводить `?' (знак запитання) і повертається до командного режиму. Пояснення останньої помилки можна отримати за допомогою команди `h' (help). 

Намагання покинути \fBed\fR або відредагувати інший файл до збереження зміненого буферу призведе до помилки. Якщо повторити команду, вона матиме успіх, але всі зміни до буферу буде втрачено. 

\fBed\fR виходить із статусом 0, якщо не відбулася помилка, у протилежному випадку статус виходу >0 (більше нуля).   

