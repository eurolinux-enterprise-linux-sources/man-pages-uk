." © 2005-2007 DLOU, GNU FDL
." URL: <http://docs.linux.org.ua/index.php/Man_Contents>
." Supported by <docs@linux.org.ua>
."
." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.2
." or any later version published by the Free Software Foundation;
." with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
." 
." A copy of the license is included  as a file called COPYING in the
." main directory of the man-pages-* source package.
."
." This manpage has been automatically generated by wiki2man.py
." This tool can be found at: <http://wiki2man.sourceforge.net>
." Please send any bug reports, improvements, comments, patches, etc. to
." E-mail: <wiki2man-develop@lists.sourceforge.net>.

.TH "inetd" "8" "2007-10-27-16:31" "© 2005-2007 DLOU, GNU FDL" "2007-10-27-16:31"

.SH "НАЗВА"
.PP

inetd \- керівник сервісами для Інтернету

.SH "СТИСЛИЙ ОГЛЯД"
.PP

\fBinetd\fR [\fB\-d\fR] [\fB\-R\fR \fIчастота\fR] [\fIфайл\fR \fIконфігурації\fR]

.SH "ОПИС"
.PP

\fBinetd\fR  повинен  запускатись  під  час завантаження системи
скриптом \fI/etc/rc\fR (дивіться \fBrc\fR(8)).  Після цього цей  демон
прослуховує  певні  сокети інтернету щодо під'єднань. Якщо
виявлене сполучення на одному  з  сокетів,  \fBinetd\fR  вирішує
якому  сервісу  належить даний сокет і викликає відповідну
програму для  опрацювання  запиту.  Після  закінчення  дії
програми,  \fBinetd\fR  продовжує  прослуховувати  сокет  (окрім
випадків,  описаних  нижче).   По  суті,  \fBinetd\fR  дозволяє,
запустити  лише  один демон, який в свою чергу викликатиме
інші, таким чином зменшуючи навантаження на систему.

Програма візьме наступні опції:

.TP
.B \fB\-d\fR
 Увімкне зневадження.

.TP
.B \fB\-R\fR \fIчастота\fR
 Вказує максимальну кількість разів,  які  дозволено викликати певний сервіс впродовж однієї хвилини. За замовчуванням \-  без  обмежень.   Частота  0  також означає необмежену кількість викликів.
.PP

По  виконанню,  \fBinetd\fR  зчитує  власний  файл конфігурації,
типово  \fI/etc/inetd.conf\fR.  Цей  файл  повинен  містити  по
одному запису у кожному полі рядка. Записи можна розділяти
кроком  табуляції  або  пробілом.  Коментарі  позначаються
знаком `#' на початку рядка. Поля повинні бути заповненими
наступною інформацією:

.RS
назва сервісу

.br
тип сокету

.br
протокол

.br
wait/nowait[.максимум] (чекати чи ні)

.br
користувач[.група] або користувач[:група]

.br
серверна програма

.br
аргументи серверної програми
.RE

Для сервісів, базованих на Sun\-RPC, поля  повинні  містити
наступне:

.RS
назва сервісу/версія

.br
тип сокету

.br
rpc/протокол

.br
wait/nowait[.максимум]

.br
користувач[.група] або користувач[:група]

.br
програма, що відповідає за сервіс

.br
аргументи серверної програми
.RE

Для   сервісів  Інтернету,  перше  поле  може  мати  також
вказаним адресу хосту у вигляді префіксу, розділеного  від
назви  сервісу  двокрапкою. Якщо використана така нотація,
то рядок поперед сервісом вказуватиме яку локальну  адресу
використовувати  \fBinetd\fR  для даного сервісу. Багаточисельні
локальні адреси можна також  вказувати  на  одному  рядку,
якщо   розділити   їх   комами.  Числові  IP\-адреси  можна
застосовувати  так  само  як  символічні   назви   хостів.
Символічні  назви  розв'язуються  за  допомогою 
\fBgethostbyname\fR(3).  Якщо  хостові  належать  багаточисельні  адресні
відображення, \fBinetd\fR створить сокет для прослуховування для
кожної окремої адреси.

Поодинокий  знак  `\fB*\fR'  означає  INADDR_ANY,   тобто   "всі
локальні  адреси".  Щоб  запобігти багатократного внесення
тієї самої адреси  в  поля,  можна  внести  її  окремо,  з
двокрапковим  закінченням,  на  одному з рядків, без решти
полів.  Це  заставить  \fBinetd\fR  запам'ятати  цю   адресу   і
використовувати  для  решти  полів  без відвертої вказівки
хосту (до наступного подібного рядка,  або  кінця  файлу).
Типово, ви знайдете рядок

.RS
\fB*:\fR
.RE

на  самому  початку  \fIinetd.conf\fR;  таким  чином, стандартні
конфігураційні файли (що не містять  вказівників  хосту  у
першому  полі),  буде інтерпретовано традиційним способом,
коли всі сервіси очікуються всіма локальними адресами.

Поле з \fIназвою\fR \fIсервісу\fR повинне містити чинну назву з  файлу
\fI/etc/services\fR.  Для "внутрішніх" сервісів (описаних нижче)
назва сервісу  повинна  співпадати  з  офіційними  назвами
(тобто  першим  записом  з  \fI/etc/services\fR).   У  випадку ж
сервісів на базі Sun\-RPC, це  поле  повинне  співпадати  з
одним  з  записів  з  \fI/etc/rpc\fR.   Частина,  що знаходиться
справа від `/' являється номером версії RPC.  Це може бути
як єдиний числовий аргумент, так і обсяг версій.  Інтервал
версій  позначається  починаючи  з  меншої  і   закінчуючи
більшою: `rusers/1\-3'.

\fIТип\fR  \fIсокету\fR  може  бути одним з: `stream', `dgram', `raw',
`rdm' або  `seqpacket',  в  залежності  від  того,  чи  це
потоковий,  детаграмний, необроблений, надійно доставлених
повідомлень  (\fIr\fReliably   \fId\fRelivered   \fIm\fRessage)   чи   сокет
послідовних пакетів.

\fIПротокол\fR повинен бути дійсним протоколом з \fI/etc/protocols\fR.
Прикладом, `tcp' або `udp'. RPC\-базовані  сервіси  повинні
вказуватись  як  `rpc/tcp' або `rpc/udp'. Просто `tcp' або
`udp' будуть розглядатися як "TCP або UDP через стандартну
версію  IP".  На  даний  момент  стандартною  є  IPv4, але
незабаром може помінятись на IPv6. Якщо вам необхідно явно
вказати  IPv4 або IPv6, використайте щось на зразок `tcp4'
або `udp6'.

Поле \fIwait/nowait\fR вказує  \fBinetd\fR,  чи  очікувати  повернення
результату   від   серверної   програми,  чи  продовжувати
обробляти наступні під'єднання на сокеті. Якщо детаграмний
сервер  після  сполучення  на  сокеті з клієнтом, звільняє
сокет,   тож   \fBinetd\fR   зможе    продовжувати    отримувати
повідомлення    на   сокеті,   такий   сервер   вважається
"мультипотоковим", і повинен бути нотованим  як  `nowait'.
Детаграмні  сервери,  які обробляють за раз всі детаграми,
що надійшли на сокеті і зрештою завершує строк своєї  дії,
вважаються  "однопотоковими" серверами і повинні вживатись
з `nowait' записом.  \fBcomsat\fR(8), \fBbiff\fR(1) і \fBtalkd\fR(8) є  саме
прикладами останнього типу детаграмного серверу.  \fBtftpd\fR(8)
являється  виключенням;  це   детаграмний   сервер,   який
встановлює  псевдо\-з'єднання.  Його  необхідно помітити як
`wait', щоб запобігти стану перегонів. Сервер читає перший
пакет,  створює  новий  сокет і відгалужується і виходить,
щоб дозволити \fBinetd\fR перевірити нові запити  щоб  запустити
новий  сервер  на  цьому  сокеті.   Необов'язковий  суфікс
\fIмаксимум\fR (розділений  від  `wait'  або  `nowait'  крапкою)
вказує  на  максимальне  число  серверів,  які  \fBinetd\fR може
запустити на протязі  60\-и  секунд.  За  замовчуванням  не
існує  обмежень.   Встановлення  цього  значення,  власне,
навпаки може  полегшити  зловмиснику  здійснити  атаку  по
відмові  від  обслуговування (denial of service).  Тож цей
параметр не рекомендовано задавати.

Потокові сервери, як правило позначаються як `nowait', але
якщо  тільки один серверний процес обробляє багаточисельні
під'єднання, його може бути помічено як  `wait'.  Основний
сокет,  в  останньому  випадку,  буде  передано  як  fd  0
(дескриптор файлу під номером  0)  серверу,  який  повинен
буде  прийняти вхідне під'єднання. Сервер, в кінці кінців,
повинен буде завершити  строк  своєї  дії  і  вийти,  якщо
залишиться  більше активних під'єднань.  \fBinetd\fR після цього
продовжить слухати  на  основному  сокеті  щодо  наступних
сполучень; саме тому сервер не повинен закривати сокет під
час завершення своєї дії.  \fBinetd\fR(8), в дійсності, є єдиним
потоковим сервером, позначеним як `wait'.

Поле  \fIкористувача\fR  повинне  містити назву користувача, від
чиєго імені сервер буде запущено.   Це  дозволяє  надавати
серверам   менші   права  ніж  root.  Можна  також  додати
необов'язкову назву групи, через крапку. Це також дозволяє
серверному  процесу числитись під відмінною від основної з
поміж груп користувача,  вказаних  у  файлі  passwd.  Якщо
групу  вказано і користувач не є root\-ом, додаткові групи,
асоційовані  з  цим  користувачем  все  ще  залишатимуться
чинними.

Поле  \fIсерверної\fR  \fIпрограми\fR  повинне містити дійсний шлях до
програми, яка буде виконана \fBinetd\fR після  отримання  запиту
на сокеті. Якщо \fBinetd\fR надає цей сервіс внутрішньо, тоді це
поле повинне містити `internal'.

Поле  \fIаргументів\fR  \fIсерверної\fR  \fIпрограми\fR  повинне  складатися
(короткої)  назви  самої  програми  й  аргументів,  які за
звичайних обставин, ми б надали на командному рядку.  Якщо
цей  сервіс  надається  внутрішньо  \fBinetd\fR,  тоді  це  поле
повинно містити `internal'.

\fBinetd\fR  надає   декілька   простих   сервісів   внутрішньо,
використовуючи  власні вбудовані функції. Цими сервісами є
`echo', `discard', `chargen' (генератор знаків), `daytime'
(час   у   срийнятному   для   людини  форматі)  і  `time'
(машиночитаємий час у формі кількості секунд від  півночі,
1  Січня  1900  року).  Всі  ці  сервіси TCP\-базовані. Про
деталі щодо кожного з них, зверніться до  відповідних  RFC
від Інформаційного Центру Мережі.

\fBinetd\fR  перечитує  свій  файл  конфігурації,  при отриманні
сигналу зависання  SIGHUP.   Таким  чином,  можна  додати,
змінити  або  усунути  певні сервіси.  \fIinetd\fR також створює
файл \fI/var/run/inetd.pid\fR, що містить власний  ідентифікатор
процесу.

.SS "Поводження TCP/UDP з IPv6"
.PP

Якщо  ви  хочете,  щоб сервер обслуговував трефік як IPv4,
так і IPv6,  вам  необхідно  буде  запустити  два  окремих
процеси для тієї самої серверної програми, вказаної як два
окремі записи у \fI/etc/inetd.conf\fR, для `tcp4' і `tcp6'.

В  залежності  від  різноманітних   комбінації   IPv4/IPv6
налаштувань демона, \fBinetd\fR поводитиметься наступним чином:

.br
  *  Якщо   ви   вказали   сервер  як  `tcp4',  трефік  IPv4 перенаправлятиметься до цього  серверу,  тоді  як  IPv6 трефік не прийматиметься.

.br
  *  Якщо  ви  вказали  два сервери як `tcp4' і `tcp6', IPv4 трефік перенаправлятиметься до  серверу,  вказаного  як `tcp4', а IPv6 трефік \- до серверу `tcp6'.

.br
  *  Якщо  сервер вказано лише як `tcp6', тільки IPv6 трефік направлятиметься до цього серверу.

.SH "ВАДИ"
.PP

Вказівники адрес хостів,  хоч  і  концептуально  зрозумілі
сервісам  RPC, не працюють цілком коректно. Це пов'язано з
тим, що інтерфейс  перетворювача  портів,  portmapper,  не
надає  можливості реєстрації різних портів для того самого
сервісу   на   різноманітних   локальних   адресах.    Все
працюватиме як слід лише за умови, що у вас не буде більше
одного запису в inetd.conf для того  самого  сервісу  RPC.
(Пам'ятайте,  що  вказівник  хосту за замовчуванням матиме
дію для записів RPC без вказаної локальної адреси.)

`rpc'  і  `tcpmux'  на  IPv6  ще  недостатньо   тестовано.
Підтримка Kerberos на IPv6 ще не перевірялась.

.SH "ДИВІТЬСЯ ТАКОЖ"
.PP

\fBcomsat\fR(8),  \fBfingerd\fR(8),  \fBftpd\fR(8),  \fBrexecd\fR(8),  \fBrlogind\fR(8),
\fBrshd\fR(8), \fBtelnetd\fR(8), \fBtftpd\fR(8)

.SH "ІСТОРІЯ"
.PP

Команда  \fBinetd\fR  вперше  з'явилась  у   4.3BSD.   Підтримка
сервісів,  базованих на Sun\-RPC, створена за зразком SunOS
4.1. Підтримка IPv6 і гек IPsec були втілені проектом KAME
у 1999 році.

Переклав Віталій Цибуляк <vt@uatech.atspace.com>

